namespace McMd
{

/*! \page factory_page Factory Classes

\section factory_purpose Why Factory Classes Exist

The Simpatico parameter file format allows users to choose at run time from among subclasses of each the extensible base classes, and thereby choose particular molecular species, file formats, and algorithms for use in a simulation. This is done primarily by using polymorphic blocks in the parameter file format. A polymorphic block is a block in the parameter file that may contain the file format for any of a set of known subclasses of a particular base class. The desired subclass is identified by the class name in the first line of such a block. The code which parse a polymorphic block must somehow recognize this string
as the name of a valid subclass. The algorithm used to parse these relies on the definition of an associated Factory class. A Factory class is responsible for recognizing the name of any valid subclass of a particular base class, and can instantiate an object of any such base class. Thus, for example, the MdIntegratorFactory class is responsible for parsing the polymorphic block that contains the parameters
for an MdIntegrator for an MD simulation. The 

The implementation of the Factory class associated with a base class defines the set of known subclasseses of that base class that can appear in a parameter file. Simpatico provides a default implementation of each of each Factory class, each of which will recognize the names of any of the subclasses that are distributed with Simpatico. This default implementation is usually located in the  subdirectory of the src/ directory that contains these subclasses. 

To allow a user-defined subclass of one of the base classes to be specified in the parameter file, the developer of a new subclass must somehow add the new class to the set that will be recognized by the associated Factory. This page provides intructions for how to do that.

\section factory_structure_sec Factory Class Structure

Each Factory class provides a method that takes the name of a subclass as a string. If this method can match the string to the name of a known subclass of the associated base class, it instantiates a new object of the desired subclass, and returns a pointer to the new object.  

The Factory class associated with a class named "Base" (where "Base" could be McMove, MdIntegrator, Diagnostic, etc.) is usually derived from the class template Util::Factory < Base >. For example, McMoveFactory is derived from the template instantiation Util::Factory < McMove >. The Util::Factory template declares a pure virtual method named factory() with the following interface.
\code
   template <class Base>
   Base* Factory<Base>::factory(const std::string className) const = 0;
\endcode
This method take the name of a subclass of Base as a string parameter className. If the method recognizes this name, it creates a new instance of the specified subclass, and returns a Base* pointer to the new object.  The pointer to the new object can then be used by the invoking function to read the associated parameter file block, by invoking the readParam() method of the new object. If the classname string is not recognized, the factory method returns a null pointer, and the program throws an Exception.

Each Factory can also contain a list of subfactories. Each subfactory of a Factory<Base> object is another Factory<Base> object that can recognize and instantiate a set of additional subclasses of Base. A Factory and its subfactories form a tree that is searched in a depth first manner: The factory() method of the default Factory for a particular base class such as Species or McMove first calls the factory() method of each of its subfactories, before attempting to match the name against its own list of names.  The Factory template provides an addSubfactory() method with the following signature:
\code
   template <class Base>
   void Factory<Base>::addSubfactory(Factory<Base>& subfactory);
\endcode
This can be used to add a subfactory to a parent factory, in order to extend the set of subclasses that will be recognized by the parent factory. 

As an example, consider the class MdIntegratorFactory that is distributed with Simpatico, which is a subclass of Factory<MdIntegrator>. Here is the code that defines the MdIntegratorFactory::factory() method:
\code
#include "MdIntegratorFactory.h"

// Subclasses of MdIntegrator 
#include "NVEIntegrator.h"
#include "NVTIntegrator.h"

namespace McMd 
{

   MdIntegrator* MdIntegratorFactory::factory(std::string &className)
   {
      MdIntegrator *ptr = 0;

      // Search subfactories first (if any)
      ptr = trySubfactories(className);
      if (ptr) return ptr;

      // Try matching names of specific subclasses of MdIntegrator.
      if (className == "NveVvIntegrator") {
         // NVE Velocity-Verlet (VV)
         ptr = new NVEIntegrator(*systemPtr_); 
      } else
      if (className == "NvtNhIntegrator") {
         // NVT Nose-Hoover (NH)
         ptr = new NVTIntegrator(*systemPtr_);  
      } else
      if (className == "NVTDpdIntegrator") {
         // NVT Dissipative Particle Dynamics (DPD)
         ptr = new NVTIntegrator(*systemPtr_); 
      }
      return ptr;
   }

}
\endcode
Note that trySubfactories() is called before the method attempts to match className to the name of several specific MdIntegrator subclass names.  The trySubfactories() method and the factory() method each return a null pointer if it cannot find a match for the name, and return a pointer to a new object if it can.

\section custom_factory_extend_sec Writing a Custom Subfactory

To "teach" a factory that is derived from Factory<Base> to recognize new user-defined subclasses of Base by name, the developer of a new subclass must either: (1) Edit the implementation of the factory that is provided with Simpatico (e.g., edit the file MdIntegratorFactory.cpp), or (2) Define a new subclass of Factory<Base> that recognizes the names of the new subclasses, and add this to the default Factory as a subfactory in the main 
program. Though method (1) is admittedly simpler, method (1) requires the user to modify files that are provided with Simpatico, which makes it hard for a user to update the code or keep it synchronized with a parent repository. We thus recommend method (2), which is described below. 

As an example, imagine that you have written an NvtLangevinIntegrator subclass of MdIntegrator, because no Langevin integrator is (thus far) provided by Simpatico. You would then also define a subclass of Factory<MdIntegrator>, which we will called MyMdIntegratorFactory, with a factory() method that can recognize the name "NvtLangevinIntegrator" and instantiate an object of this class.  Here is an example of the required class definition:
\code
#include "MdIntegratorFactory.h"
#include "NvtLangevinIntegrator.h"

namespace McMd 
{

   class MyMdIntegratorFactory : public Factory<MdIntegrator>
   {
   public:

      virtual MdIntegrator* factory(std::string &subclassName)
      {
         MdIntegrator *ptr = 0;

         ptr = trySubfactories(className);
         if (ptr) return ptr;

         if (subclassName == "NvtLangevinIntegrator") {
            ptr = new NvtLangevinIntegrator(*systemPtr_);
         }
         return ptr;
      }

   };

}
\endcode
The factory method for this subclass returns a pointer to a new NvtLangevinIntegrator, if the subclassName string is "NvtLangevinIntegrator". It returns a null pointer otherwise. 

\section set_factory_extend_sec Adding a Custom Factory 
After writing a custom factory, one must invoke the addSubfactory() method of the default factory that is provided with Simpatico to register the new Factory as a subfactory of the default Factory. This must be done in the main program, before the readParam() method is invoked.  

Below, we show an example of a main program for an MdSimulation that adds a custom factory MyMdIntegratorFactory as a subfactory to the MdIntegratorFactory. 
\code
namespace McMd
{

   int main 
   {
      McSimulation          sim;
      MyMdIntegratorFactory myFactory;
 
      \\ Register the custom Factory with the MdSystem
      sim.system().mdIntegratorFactory().addSubfactory(myFactory);

      \\ Read the parameter file from standard input.
      sim.readParam();
  
      \\ Read and execute the command script.
      sim.readCommands();
  
   }

}
\endcode
A similar pattern is used to set user defined Factory classes for subclasses of Species, McMove, and Diagnostic. The SpeciesFactory and DiagnosticFactory are accessed through methods of the Simulation class. The McMoveFactory is accessible through a method of McSimulation.

\section custom_factory_accessor_sec Access to Factory Classes

The default Factory object for each of the polymorphic base classes in an mcSim or mdSim simulation can be accessed by reference via a method of either the Simulation or McMd::System classes, or of the McSimulation, MdSimulation, McSystem or MdSystem subclasses. The required accessor methods for the factory classes used by mcSim and mdSim are: 
<ul>
  <li> McMd::Factory<Species>&            McMd::Simulation::speciesFactory(); </li>
  <li> McMd::Factory<Diagnostic>&         McMd::Simulation::diagnosticFactory(); </li>
  <li> McMd::Factory<McMove>&             McMd::McSimulation::mcMoveFactory(); </li>
  <li> McMd::Factory<MdIntegrator>&       McMd::MdSystem::mdIntegratorFactory(); </li>
  <li> McMd::Factory<ConfigIo>&           McMd::System::configIoFactory(); </li>
  <li> McMd::Factory<TrajectoryIo>&       McMd::MdSystem::trajectoryIoFactory(); </li>
  <li> McMd::Factory<Perturbation>&       McMd::System::perturbationFactory(); </li>
  <li> McMd::PairFactory&                 McMd::System::pairFactory(); </li>
  <li> McMd::Factory<BondPotential>&      McMd::System::bondFactory(); </li>
  <li> McMd::Factory<AnglePotential>&     McMd::System::angleFactory(); </li>
  <li> McMd::Factory<DihedralPotential>&  McMd::System::dihedralFactory(); </li>
  <li> McMd::Factory<BondPotential>&      McMd::System::linkFactory(); </li>
  <li> McMd::Factory<ExternalPotential>&  McMd::System::externalFactory(); </li>
</ul>
Methods of Simulation and System are also available in the MC and MD subclasses of these classes, and so can be used
in either MC or MD simulations. See the page about \ref potentials_page for a more detailed discussion of the potential energy and potential energy factory classes.

When a factory must be accessed via an instance of System or one of its subclasesses, a reference to the required McSystem or MdSystem object can be obtained using the system() method of the parent McSimulation or MdSimulation object. This is done in the above example, in which the MdIntegratorFactory is accessed via the line 
\code
    simulation.system().mdIntegratorFactory().addSubfactory(myFactory);
\endcode
Here, simulation is an instance of McSimulation. The method McSimulation::system() returns a reference to the associated McSystem object. The method System::mdIntegratorFactory() then returns a reference to the default Factory<MdIntegrator>.  Invoking the method method Factory<MdIntegrator>::addSubFactory() of this factory object then adds the user-defined subfactory to the default factory.

<ul>
 <li> \ref inherit_page     (Previous)    </li>
 <li> \ref extend_page      (Up)    </li>
 <li> \ref potentials_page  (Next)    </li>
</ul>
 
*/
}
