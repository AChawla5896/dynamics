namespace McMd
{

/*! \page subfactory_page Sub-Factories

A Factory may actually contain one or more subfactories. The creation of a subfactory is an alternative way of adding new classes to the set that will be recognized by a factory, without modifying the Factory implementation.  Each subfactory of a Factory<Base> object is another Factory<Base> object. A Factory and its subfactories (if any) form a tree that is searched in a depth first manner: The factory() method of the parent class calls the factory method of every subfactory in a attempt to match the name, before attempting to match it against its own list of names. 

The Factory template provides an addSubfactory() method, which allows a user to add a subfactory to a parent factory.  This method has the following signature:
\code
   template <class Base>
   void Factory<Base>::addSubfactory(Factory<Base>& subfactory);
\endcode
Any number of subfactories can be added to a parent factory class.

This recursive search of subfactories is implemented by the trySubfactories() method. This method calls the factory() method of each subfactory, passing the subclass name as argument. The factory() method of each subfactory then attempts to match the name. If a match is found, the factory() method creates a new object of the desired subclass, and returns a pointer to the new object. When a match is found by any subfactory, trySubfactories() immediately stops and returns the pointer to the new object. If no match is found by any subfactory, trySubfactories() returns a null pointer.

As an example, imagine that you have written an NvtLangevinIntegrator subclass of MdIntegrator, because no Langevin integrator is (thus far) provided by Simpatico. You would then also define a subclass of Factory<MdIntegrator>, which we will called MyMdIntegratorFactory, with a factory() method that can recognize the name "NvtLangevinIntegrator" and instantiate an object of this class.  Here is an example of the required class definition:
\code
#include "MdIntegratorFactory.h"
#include "NvtLangevinIntegrator.h"

namespace McMd 
{

   class MyMdIntegratorFactory : public Factory<MdIntegrator>
   {
   public:

      virtual MdIntegrator* factory(std::string &subclassName)
      {
         MdIntegrator *ptr = 0;

         ptr = trySubfactories(className);
         if (ptr) return ptr;

         if (subclassName == "NvtLangevinIntegrator") {
            ptr = new NvtLangevinIntegrator(*systemPtr_);
         }
         return ptr;
      }

   };

}
\endcode
The factory method for this subclass returns a pointer to a new NvtLangevinIntegrator, if the subclassName string is "NvtLangevinIntegrator". It returns a null pointer otherwise. 

\section set_factory_extend_sec Adding a Custom Factory 
After writing a custom factory, one must invoke the addSubfactory() method of the default factory to register the new Factory as a subfactory of the default Factory. This must be done in the main program, before the readParam() method is invoked.  

Below, we show an example of a main program for an MdSimulation that adds a custom factory MyMdIntegratorFactory as a subfactory to the MdIntegratorFactory. 
\code
namespace McMd
{

   int main 
   {
      McSimulation          sim;
      MyMdIntegratorFactory myFactory;
 
      \\ Register the custom Factory with the MdSystem
      sim.system().mdIntegratorFactory().addSubfactory(myFactory);

      \\ Read the parameter file from standard input.
      sim.readParam();
  
      \\ Read and execute the command script.
      sim.readCommands();
  
   }

}
\endcode
A similar pattern is used to set user defined Factory classes for subclasses of Species, McMove, and Diagnostic. The SpeciesFactory and DiagnosticFactory are accessed through methods of the Simulation class. The McMoveFactory is accessible through a method of McSimulation.

\section custom_factory_accessor_sec Access to Factory Classes

The default Factory object for each of the polymorphic base classes in an mcSim or mdSim simulation can be accessed by reference via a method of either the Simulation or McMd::System classes, or of the McSimulation, MdSimulation, McSystem or MdSystem subclasses. The required accessor methods for the factory classes used by mcSim and mdSim are: 
<ul>
  <li> McMd::Factory<Species>&            McMd::Simulation::speciesFactory(); </li>
  <li> McMd::Factory<Diagnostic>&         McMd::Simulation::diagnosticFactory(); </li>
  <li> McMd::Factory<McMove>&             McMd::McSimulation::mcMoveFactory(); </li>
  <li> McMd::Factory<MdIntegrator>&       McMd::MdSystem::mdIntegratorFactory(); </li>
  <li> McMd::Factory<ConfigIo>&           McMd::System::configIoFactory(); </li>
  <li> McMd::Factory<TrajectoryIo>&       McMd::MdSystem::trajectoryIoFactory(); </li>
  <li> McMd::Factory<Perturbation>&       McMd::System::perturbationFactory(); </li>
  <li> McMd::PairFactory&                 McMd::System::pairFactory(); </li>
  <li> McMd::Factory<BondPotential>&      McMd::System::bondFactory(); </li>
  <li> McMd::Factory<AnglePotential>&     McMd::System::angleFactory(); </li>
  <li> McMd::Factory<DihedralPotential>&  McMd::System::dihedralFactory(); </li>
  <li> McMd::Factory<BondPotential>&      McMd::System::linkFactory(); </li>
  <li> McMd::Factory<ExternalPotential>&  McMd::System::externalFactory(); </li>
</ul>
Methods of Simulation and System are also available in the MC and MD subclasses of these classes, and so can be used in either MC or MD simulations. See the page about \ref potentials_page for a more detailed discussion of the potential energy and potential energy factory classes.

When a factory must be accessed via an instance of System or one of its subclasesses, a reference to the required McSystem or MdSystem object can be obtained using the system() method of the parent McSimulation or MdSimulation object. This is done in the above example, in which the MdIntegratorFactory is accessed via the line 
\code
    simulation.system().mdIntegratorFactory().addSubfactory(myFactory);
\endcode
Here, simulation is an instance of McSimulation. The method McSimulation::system() returns a reference to the associated McSystem object. The method System::mdIntegratorFactory() then returns a reference to the default Factory<MdIntegrator>.  Invoking the method method Factory<MdIntegrator>::addSubFactory() of this factory object then adds the user-defined subfactory to the default factory.

<ul>
 <li> \ref potentials_page  (Previous) </li>
 <li> \ref extend_page      (Up)  </li>
 <li> \ref module_page     (Next)  </li>
</ul>
 
*/
}
