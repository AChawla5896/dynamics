namespace McMd
{

/*! \page analysis_page Data Analysis

The mcSim and mdSim programs allow a user to evaluate and analyze a variety of physical properties either during a simulation, "on the fly", or after, by postprocessing of a sequence of system configurations that were save to file during a simulation. Both modes of operation use the same main programs, and both use same set of classes for data analysis.  Postprocessing is invoked by a command in the command file that causes the main McSimulation or McSimulation to read in a sequence of configurations from file, thus replacing the loop over MC or MD steps in a simulation by an loop over input configurations.

The classes that are used for data analysis in mcSim and mdSim are subclasses of the McMd::Diagnostic base class.  A typical subclass of Diagnostic evaluates one or more physical properties of interest, and either outputs a sequence of values to an associated file for later analysis or updates one or more statistical accumulators in order to accumulate, e.g., averages, autocorrelation functions, histograms etc.  Source code for the diagnostic classes that are distributed with Simpatico can be found in the src/mcMd/diagnostics directory. Users may create new diagnostics by writing new subclasses.

\section analysis_onthefly_section On-the-fly Analysis

The choice of what analysis operations (if any) should be executed during a simulation is specified in the parameter file. Each McSimulation or MdSimulation has a DiagnosticManager object, which maintains an array of pointers to Diagnostic objects. The set of diagnostics that will be used during a simulation is specified in the "DiagnosticManager" block of the parameter file.  Each subblock in this block gives the subclass name and any parameters required by the diagnostic.  As it encounters each such subblock, the DiagnosticManager creates an instance of the specified subclass (identified by the name in the first line of the subbblock), calls the readParam() method of this new object to initialize the new object, and adds a pointer to the new object to an array of pointers. Most diagnostics write data to an associated output file, either during the simulation or as a summery at the end of a simulation, and thus require an output file name as a parameter in the associated parameter file block. An unlimited number of diagnostics may be added to a simulation.

Every subclass of Diagnostic must implement a sample() method that takes a step counter as an argument, and that is invoked periodically during a simulation, at some specified interval.  The sample() method generally evaluates a physical property and either writes data to an associated file or updates a statistical accumulator, or both. The sample() method of each diagnostic is called only when the step counter is an integer multiple of the number of an integer "interval" parameter.  The step counter represents the number of MD or MC steps in a simulation run, or the number of configurations read from file in a postprocessing run.  The value of the "interval" parameter for each Diagnostic is given within the associated parameter file block in the parameter file.  The interval parameter may be different for different diagnostics, but the interval for each diagnostic must be a multiple of a a "baseInterval" parameter which is specified as the first line within the DiagnosticManager block of the parameter file. 

\section analysis_configWrite_section Dumping Configurations to File

DumpConfig is a sublcass of Diagnostic that is used to write system configuration files at regular intervals, for later post-processing. Each configuration contains (at a minimum) the atomic coordinates and the dimensions of the periodic simulation cell at a given instant. Any of several output file formats may be chosen by invoking a SET_CONFIG_IO command in the command file before the SIMULATE command, which runs a simulation.  The name of each configuration file written by DumpConfig is constructed by appending a sequential integer counter to a base file name. The base file name is specified in the DumpConfig parameter file block. 

\section analysis_postprocess_section Postprocessing

To postprocess a sequence of configuration dump files, one must run mcSim or mdSim program using a parameter file very similar to that used to initialize the original simulation, and a command script that contains an "ANALYZE_DUMPS" command, rather than a "SIMULATE" command.  The ANALYZE_DUMPTS command causes the program to read in a sequence of configuration files and treat each configuration exactly as if they were generated during a simulation.  The set of diagnostics that will be applied to a sequence of configurations during postprocessing is specified in the "DiagnosticManager" block of the parameter file, exactly as for diagnostics that are applied on-the-fly during a simulation.  The same set of diagnostic subclasses are available for use in either mode. 

The names of the input configuration files are constructed by concatenating the inputPrefix parameter of the FileMaster, a base name that is specified as an argument to the ANALYZE_DUMPS command and an integer in a range that is specified in the ANALYZE command. For example, if the inputPrefix of the FileMaster was set to out/ (because this was the output prefix used by a previous simulation), and the outputPrefix was set to analyze/, the command
\code
   ANALYZE_DUMPS  0   19   dump/config
\endcode
would cause the main McSimulation or MdSimulation object to read in and apply all of the specified diagnostics to configurations files with names out/config.0 out/config.1 ... in/config.19, and write the results of the analysis to files in the analyze/ directory. 

The mdSim program may also be used postprocess an MD trajectory file. An MD trajectory file is a binary file that contains a sequence of configurations ("frames") within a single file. To analyze an MD trajectory file, simple use an ANALYZE_TRAJECTORY command in place of ANALYZE_DUMPS.

One practical difference between postprocessing and on-the-fly analysis is that, during postprocessing, the "interval" of each diagnostic is interpreted as a number of configurations to be read from file between subsequent calls of the sample method, rather than the number of MD or MC steps. Unless configurations were written to file more frequently than necessary, the interval for most diagnostics should thus be set to 1 during post processing, but intervals much greater than 1 are common during on-the-fly analysis. 

<ul>
 <li> \ref examples_page    (Prev) </li>
 <li> \ref guide_page       (Up)   </li>
 <li> \ref restart_page  (Next) </li>
</ul>

*/
}
