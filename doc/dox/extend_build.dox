namespace McMd
{

/*! \page extend_build_page Build system (adding new classes)

Simpatico is built using a system of unix makefiles. The procedure described here allows users to add new classes to the list of source files maintained by the build system, so that new classes can be compiled and linked by the same system. 
Source and header files for user-defined classes should be placed in special user/ directories that are provided for this purpose. Any new class that is a subclass of an existing base class should be defined within the same C++ namespace as the base class. Source (*.cpp) and Header (*.h) files for classes that are defined in the McMd namespace, which can be used in the mcSim and mdSim programs, should be placed in the src/mcMd/user/ directory. Header and source files for new classes that are added to the DdMd namespace, which can be used only by ddSim, should be placed in the src/ddMd/user/ directory. Files for classes that define new interaction potential functions should be placed the directory src/inter/user, as discussed in more detail \ref potentials_page "here". 

After placing new files in the appropriate directory, one must modify a file named "sources.mk" in the same directory to adding the source file to the build system. The "sources.mk" file in any subdirectory of src/ is a makefile fragment that contains a list of all of the source files in that directory. The source.mk file in the user/ initially contains an empty list. For example, the file src/mcMd/user/ initially looks like this:
\code
mcMd_user_SRCS=\
    #$(SRC_DIR)/mcMd/user/Class1.cpp \
    #$(SRC_DIR)/mcMd/user/Class2.cpp

mcMd_user_OBJS=$(mcMd_user_SRCS:.cpp=.o)
\endcode
In this file, mcMd_user_SRCS is a makefile variable that lists all of the *.cpp implementation files in this directory. In any such file, this name of this variable is constructed by appending the suffix "_SRCS" to a mangled form of the directory path, expressed relative to the src/ directory.  The corresponding _OBJS variable (mcMd_user_OBJS in this example) gives a list of all of the object (*.o) files that should be created by compiling these source files. Each name in the list of object files is created by simply replacing the *.cpp file extension a source file name by  a *.o extension. 

In the above example, the entries Class1.cpp and Class2.cpp are placeholders that are commented out by the '#' symbol at the beginning of each line. To add a new class to this initially empty list, uncomment the last of these lines, by removing the `#', and replace the placeholder "Class2.cpp" by the name of the new source file. The backslash at the end of each line is the makefile line continuation symbol, and should thus appear at the end of every line of the definition of the _SRCS variable except the last line. The path to each source file must be given using the same format as that of the placeholder examples, which use the macro $(SRC_DIR) to represent the absolute path of the simpatico/src/ directory. Only the *.cpp source file should be listed, and not the corresponding header file. Header-only classes do not need to be compiled separately or linked, and thus should not be added to the build system. 

To compile all of the *.cpp files in a user/ directory, without re-compiling any other files, simply type
\code
  > make all
\endcode
from within that directory. This is the command used to compile a new class while it is being written and debugged. 

After the new source file is added to the appropriate _SRCS variable, it will automatically be compiled and linked into an executable when the relevant program or programs are compiled. 

Navigation: 
<ul>
 <li> \ref inherit_page    (Previous)       </li>
 <li> \ref extend_page     (Up)       </li>
 <li> \ref factory_page    (Next)     </li>
</ul>

*/
}
