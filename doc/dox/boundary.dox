namespace McMd
{

/*! \page boundary_page Boundary Conditions

The choice of lattice system for the periodic unit cell (i.e., cubic, 
tetragonal, or orthorombic) used by Simpatico is set by a typedef
named Boundary. The typedef "Boundary" is defined in the file 
"src/mcMd/boundary/Boundary.h". By default, Boundary is defined to 
be a synonym for the "OrthorhombicBoundary" class. Throughout the
source code, the class that represents the periodic boundary 
conditions is referred to throughout by the typedef "Boundary" 
rather than by the explict class name, such as "OrthorhombicBoundary". 
This is designed to make it relatively easy for users to change 
the unit cell symmetry by changing this typedef to refer to, for
example, "CubicBoundary" or "TetragonalBoundary", and recompiling
the program. For the moment, there is little reason to change from
an orthorhombic cell a more restrictive cubic or tetragonal cell,
since all three classes use the same implementation of the core
algorithms. The main advantage of the use of a typedef is that it 
will make it implement a version of the program for non-orthogonal 
unit cells, as discussed below.

We have chosen to use typedefs rather a polymorphic classes 
for the boundary conditions because of concerns about efficiency. 
The Boundary class provides methods that calculate separations 
using the minimum image convention, which are called repeatedly
in the inner loops of both MD and MC simulations. The use of 
a polymorphic class with virtual functions would be the most
flexible solution. This would allow the user to instantiate 
instances of subclasses that represent orthogonal or 
non-orthogonal boundary conditions at run time, but would also
prevent inlining of the minimum image separation calculations.
Instead, we plan to eventually enable non-orthogonal boundary 
condtions by providing a TriclinicBoundary class (not yet 
implemented) and allowing the user to change the typedef to
compile versions of the program for triclinic and orthorhombic 
boundaries. Making the choice at compile time allows us to 
avoid the extra cost of the minimum-image calculations for a 
triclinic cell in simulations that use an orthorhombic cell.

<ul>
 <li> \ref preprocessor_page (Previous)  </li>
 <li> \ref custom_page       (Up)        </li>
 <li> \ref extend_page     (Next)      </li>
</ul>

*/
}
