Each archive must be derived from OArchive or IArchive:

#define UTIL_SERIAL_TRUE  true;
#define UTIL_SERIAL_FALSE false;

class BufferOArchive 
{
   public:
 
   static const bool is_saving  = UTIL_SERIAL_TRUE;
   static const bool is_loading = UTIL_SERIAL_FALSE;
 
   template <typename& T>
   void operator << (T& t)
   {  
      serialize(*this, t); 
      return *this;
   }

   template <typename& T>
   void operator & (T& t)
   {
      serialize(*this, t); 
      return *this;
   }

};

template <typename& T>
void serialize(OArchive& ar, T& t, const unsigned int version)
{ // Explicit save operation for this archive and primitive data }


------------------------------------------------------------------
class BufferIArchive 
{

public:
 
   static const bool is_saving  = UTIL_SERIAL_FALSE;
   static const bool is_loading = UTIL_SERIAL_TRUE;
 
   template <Type& T>
   IArchive& operator & (T& t)
   { 
      serialize(*this, t);
      return *this;
   }

   template <Type& T>
   IArchive& operator >> (T& t)
   {
      serialize(*this, t); 
      return *this;
   }

};

template <typename& T>
void serialize(IArchive& ar, T& t, const unsigned int version)
{ // Explicit save operation for this archive and primitive data }

----------------------------------------------------------------

class Serializable{};

template <Archive ar> 
void serialize(IArchive& ar, Serializable& t, const unsigned int version)
{  t.serialize(ar, version); } 
