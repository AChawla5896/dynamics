
Goals:

1) Allow easy inclusion of optional blocks in parameter files.

2) Standardize treatment of polymorphic blocks, and allow the same
   class to be used in either a polymorphic or non-polymorphic 
   fashion, using a mechanism similar to that used for optional 
   elements. 

3) Standardize the treatment of headers and footers. Clean up
   the treatment of indentation.

----------
Proposals:

1) Add a Buffer class that contains a static std::string buffer_
member, and a static std::string Buffer::peek(std::istream&) method 
that allows one to a peek at a label string, while still leaving it
available for the next class to read. Make Label and ParamComposite
friends of this class. Also add Buffer::match(std::string&) that
checks if the beginning of the string in the buffer matches a
specified string.

2) Modify the >> operator for a Label so that it reads from the
LabelBuffer, rather than the istream, if the buffer is not empty.

3) Add classes ParamCompositeOpen and ParamCompositeClose and 
corresponding methods readOpen(std::string& classname) and readClose 
to ParamComposite. Use the readParam methods of these, rather than 
Label, to parse the required elemements, in a way that can allow 
for white space. Also, have the readParam methods of ParamOpen and 
ParamOpenClose read from the Label::buffer_ when it is not empty.

4) Remove the Comment class - not needed if we add appropriate classes 
for headers and footers.

----------------------------------------------------------------------
Usage:

   --------------------------------------
   Single optional Parameter:
   
   if (Buffer::peek(in) == "ExpectedLabel") {

   }

   --------------------------------------
   Optional or polymorphic ParamComposite:
   
   Buffer::peek(in);
   if (Buffer::match("Classname") {
     ... 
   } else 
   if (Buffer::match("NextClassname") {
     ...
   }

Alternative - Write peek so it only extracts the alphanumeric part
of a string.
