How to allow for optional entries in a parameter file:

Label class:

  - Add a stringstream buffer_ to Label. 
  - Add an optional isOptional argument to constructor, default false.
  - Add bool isOptional_ member, initialize to isOptional.
  - Add bool match_ member, set false by default.

  - Within the >> operator:

    If buffer is empty {
       in >> actual
    } else {
       buffer >> actual
    }
    if (actual != label.label_) {
       if (isOptional_) {
          put actual into buffer
          set match_ == false;
       } else {
          return 0.
       }
    } else {
       match_ = true;
       if (isOptional_) {
          clear buffer
       }
    }
    return in;

Parameter:

  - Add isOptional optional parameter to constructor, default false.
  - Add isOptional_ member, initialize to isOptional parameter.
  - Add isOptional() accessor. 
  - Add readLabel method that signals whether the label matches.

template <typename Type>
class ScalarParam<Type> templates:

  - Change return type of readParam(std::istream to int)
  - int readParam() {
        If label does not match {
            return 0 immediately
        } else {
            finish reading;
            return 1;
        }
    }

template <typename Type>
class (CArray|CArray2D|DArray|FArray)Param<Type> templates:

  - Change return type to int
  - Return 0 immediately if label does not match as above.

ParamComposite:

  - Strategy: Make changes to allow for optional parameter first, worry
    about optional parameter composites later. 

  - Make add<Type> and add(ArrayType)<Type> templates private.

  - Separate instantiation of Parameter objects from addition to list:
    Make the add* methods take an instantiated ScalarParam as a parameter,
    rather than taking a label and value and instantiating it themselves.

  - Change the read*<Type> methods to instantiate a ScalarParam object,
    and then add it only after reading.

  - Change the load*<Type> methods accordingly.

  - Later: Default implementation of ParamComposite::readParam() would 
    check if the class label matched and return immediately if did not.
