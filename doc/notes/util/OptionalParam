How to allow for optional entries in a parameter file:

Label class:

  - Add a stringstream buffer to Label. 
  - Add bool isOptional_ member, set false by default.
  - Add an optional isOptional argument to constructor.
  - Within the readParam method:

    If buffer is empty, read into buffer;
    if (isOptional_) {
       compare strings
       if (string == expected) {
          clear buffer; return 1;
       } else {
          return 0.
       }

Parameter:

  - Add isOptional_ member.
  - If isOptional, return immediately if Label does not match. 

ParamComposite:

  - Add className member to ParamComposite. Set value for every
    subclass of ParamComposite. (No harm done at this point).

  - Change name of method of a ParamComposite to readParamBlock(). 
    This is the only method that is defined for ParamComposite 
    subclasses in the McMd or DdMd namespace, so a global change 
    might suffice.

  - Default implementation of ParamComposite::readParam() would 
    call Begin::read, virtual readChildParameters(), End::read(). 
    Behavior of the default implementation could depend on 
    isOptional member.

  - Remove explicit Begin and End statements from readParamBlock
    statement of every ParamComposite. Perhaps there is some
    way to automate this change?

