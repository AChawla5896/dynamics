Goal: Design files that can be used by multiple programs.

Requirements / proposals:

   - Three shared file types: configuration (initialization), 
     trajectory (analysis), and topology (molecule structure).

   - Don't worry about compatibility with other MD programs - this
     is a separate problem, to be handled separately

   - Self-documenting configuration and trajectory formats (allows 
     adaptation and validation) with several format variants. A single 
     class should be able to read any usable variant of this format, 
     with appropriate error checking, and throw exceptions for 
     variants that they cannot handle.

   - Configuration and trajectory files that are intended for use
     by McMd programs must have atom ids in canonical molecule order, 
     i.e., consecutive from 0, and ordered by species, molecule and 
     atom. Files that obey this convention should document this fact,
     and should indicate the size of each species (# of molecules)
     and molecules (# of atoms).

   - DdMd will need to be able to read, store, and write back out
     basic information about species (number of molecules of each
     type, and number of atoms per molecule) in order to allow it
     to validate (on input) and document (on output) that a 
     configuration is in canonical molecular order.

   - McMd programs should read configuration and trajectory format
     variants produced by DdMd (ordered or disordered). The reader
     should require only that atom ids be in canonical molecule
     order, but not that atoms be ordered by id in the config file.

   - McMd programs should write a configuration format that can be 
     used to initialize DdMd, which must include groups. Atom ids
     used in this format must be in canonical molecular order. The
     format should contain information about species and molecule
     sizes.

   - MdPp should read all configuration and trajectory formats 
     produced by DdMd, with atom ids in canonical molecule order 
     or not, and should be able to make use of molecule information 
     when it is available.

   - Configuration files can be asii files, and somewhat verbose, but 
     trajectory formats should be binary and very compact. Only 
     trajectory formats are intended for use for data analysis.

   - Allow but do not require trajectory files to contain 
     configuration information (molecule and species sizes, fixed
     atom info (types, etc.), groups). Readers should check for 
     consistency of redundant data.

   - Provide a separate topology file format. This can be written
     by (md|mc)Sim and read by MdPp for molecule based analysis. 
     It will not normally be used by ddSim, except perhaps by a
     SnapShot, for on-the-fly analysis.

Configuration file (ascii):

   BOUNDARY (same as current)
   [MOLECULES] - presence of this block indicates canonical atom id order
   ATOMS - format variable, indicated within block
   [BONDS]
   [LINKS]
   [ANGLES]
   [DIHEDRALS]

Trajectory file (binary):

   Header:
      nAtom int
      frameFormat - bitfield with flags that include: molecular?, 
                     fixed? ordered?, velocity? shift? (other?)
      headerFormat - bitfield indicating which optional info follows
      [MOLECULES] - molecule & species sizes, required iff molecular 
      [ATOMTYPES] - Format, followed by per atom: typeId, [charge]
      [BONDS][ANGLES][DIHEDRALS]
   Frame:
      iStep
      boundary
      ATOMS (id, position, optionally shift, velocity)

---------------------------------------------------------------------
Blocks in configuration file:

MOLECULES:

   nSpecies  [int]

   For each species
   speciesId  nAtom  nMolecule

ATOMS: 

   format [i][m][t]p[v][s][c]
   nAtom integer

   Format flags:
   i = global id                         only required for DdMd
   m = context (species, molecule, atom) only required for DdMd
   t = type id                           only required for DdMd
   s = shift                             optional for MD simulations
   p = position                          always required
   v = velocity                          required by MD simulations
   c = charge                            (possibility, for future)

   Default output formats by different programs:

       mdSim writes all of the above, shift when possible
       mcSim writes all of the above except velocity and shift
       ddSim writes all that it can (context and shift optional)

       Note: ddSim must know if atoms are in canonical molecular order

GROUP<N>: BONDS, ANGLES, DIHEDRALS

   nGroup
   For each{
      atomId0 ... atomId(N-1) typeId
   }

---------------------------------------------------------------------
Blocks in trajectory frame:

  FRAME:
     For each atom {
        id position(scaled, as 3xuint) [shift 3 x int] [velocity]
     }
---------------------------------------------------------------------
Plan:

<<<<<<< HEAD
   1) McMd ConfigIo for configuration format      (SpcConfigIo)
   2) McMd TrajectoryIo for trajectory format     (SptTrajectoryIo)
   3) Add simple species to DdMd::Simulation
   4) DdMd ConfigIo for configuration format      (SpcConfigIo)
   5) DdMd Writer for trajectory format           (SptTrajectoryWriter)
   6) Tools reader                                (SptTrajectoryReader)
   7) Allow optional arguments in command lines
   8) Divide readers and writers for McMd
=======
   1) McMd ConfigIo for configuration format      (SmcConfigIo)
   2) McMd TrajectoryIo for trajectory format     (SmtTrajectoryIo)
   3) Add simple species to DdMd::Simulation
   4) DdMd ConfigIo for configuration format      (SmcConfigIo)
   5) DdMd writer for trajectory format           (SmtTrajectoryReader)
   6) Tools reader                                (SmtTrajectoryReader)
>>>>>>> devel
