Revision Notes
-----------------------------------------------------------------------
branches/evaluators branch created in revision r1048

Files modified in trunk since then:
  - trunk/tools/mathematica/confiz.nb
  - trunk/tools/python/MakeMaker.py
  Both have been copied to evaluators branch.

Changes, to create potentials and evaluators, for each potential "Type":
-----------------------------------------------------------------------
Create New files:

   potentials/type/TypePotential.h     // abstract base class

   mcSimulation/McTypePotential.h      // Mc abstract class
   mcSimulation/McTypePotential.cpp
   mcSimulation/McTypePotentialImpl.h  

   mdSimulation/MdTypePotential.h      // Md abstract class
   mdSimulation/MdTypePotential.cpp
   mdSimulation/MdTypePotentialImpl.h

   potentials/type/TypeFactory.h
   potentials/type/TypeFactory.cpp

To compile before changing the System, or the execution behavior, compile 
everything except the TypeFactory.cpp, which includes a System.h header. 
Compiling TypeFactory.cpp instantiates an (Mc|Md)TypePotentialImpl<Evaluator>,
and causes an ambiguity between the potentials/type/TypePotential.h typedef 
file and the potentials/TypePotential.h abstract base class. Unfortunately,
this leaves the implementation template completely untested.
-----------------------------------------------------------------------
Remove:

    potentials/type/TypePotential.h   typedef file
    potentials/type/TypePotential.h_r typedef file

-----------------------------------------------------------------------
Changes to System.h

   rm  #include <potentials/TypePotential.h>;   // typedef 

   add class TypeFactory; // forward declaration
   
   public:

      rm  TypePotential& typePotential(); //

      add void setTypeFactory(TypeFactory& factory); // declaration

      add TypeFactory& typeFactory(); // declaration

      add typeStyle& typeStyle() const; // declaration

   private:

      rm  TypePotential* typePotentialPtr_;

      add std::string typeStyle_; 

      add TypeFactory* typeFactoryPtr_; 

      add bool createdTypeFactory_; 

   inline:

      rm  inline TypePotential& typePotential(){ ... }

-----------------------------------------------------------------------
Changes to System.cpp

   add  #include <potentials/type/TypeFactory.h>;    // include

   // Default constructor
   System::System()

       Initialization list:
          rm  typePotentialPtr_(0)
          add typeFactoryPtr_(0),
          add createdTypeFactory_(false),
          add typeStyle_(),

   {
      rm typePotentialPtr_ = new TypePotential();
   }

   // Copy constructor
   System::System(System& other)
       Initialization list:
          rm  typePotentialPtr_(other.typePotentialPtr_)
          add typeFactoryPtr_(other.typeFactoryPtr_),
          add createdTypeFactory_(false),
          add typeStyle_(other.typeStyle_),
   {}

   // Destructor

   rm:  if (typePotentialPtr_) { delete typePotentialPtr_; }

   add: if (typeFactoryPtr_ && createdTypeFactory_) {
           delete typeFactoryPtr_;
        }


   readParam:

      add read<std::string>(in, "typeStyle", typeStyle_);

   rm
        typePotentialPtr_->setNTypeType(simulation().nTypeType());
        reamParamComposite(in, typePotential());

   add  void System::setTypeFactory(TypeFactory& factory){...}

   add  TypeFactory& System::typeFactory(){ ... }

   add  std::string& System::typeStyle() const {....} 

-----------------------------------------------------------------------
Changes to McSystem.h

   class McTypePotential; // forward declaration

public:
    
    add McTypePotential& typePotential() const; // declaration

private:

    add McTypePotential* typePotentialPtr_;     // pointer member

inline:

    add McTypePotential& McSystem::typePotential() const; // definition

-----------------------------------------------------------------------
Changes to McSystem.cpp

add #include <potentials/type/TypePotential.h>
add #include <potentials/type/TypeFactory.h>

   // Constructor initializer list
   add typePotentialPtr_(0),

   // Destructor
   add if (typePotentialPtr_) { delete typePotentialPtr_; }

   // readParam
   typePotentialPtr_ = typeFactory().mcFactory(typeStyle(), *this);
   readParamComposite(in, *typePotentialPtr_);

   pass through function definitions:

      add typeAtomEnergy(Atom& atom);
      add typeEnergy();
      add computeTypeStress(Type& stress);

      rm  computeTypeStressImpl(...)

-----------------------------------------------------------------------
Changes to MdSystem.h

   class MdTypePotential; // forward declaration

public:
    
    add MdTypePotential& typePotential() const; // declaration

private:

    add MdTypePotential* typePotentialPtr_;     // pointer member

inline:

    add MdTypePotential& MdSystem::typePotential() const; // definition

-----------------------------------------------------------------------
Changes to MdSystem.cpp

add #include <potentials/type/TypePotential.h>
add #include <potentials/type/TypeFactory.h>

   // Default constructor initializer list
   add typePotentialPtr_(0),

   // Copy constructor

   add: typePotentialPtr_(0),
   add: use of FactoryPtr to copy *other.typePotentialPtr_

   // Destructor
   add: if (typePotentialPtr_) { delete typePotentialPtr_; }

   // readParam
   typePotentialPtr_ = typeFactory().mcFactory(typeStyle(), *this);
   readParamComposite(in, *typePotentialPtr_);

   pass through function definitions:

      add addForces() {.... }
      add typeEnergy(){ .... }
      add computeTypeStress(Type& stress) { .... }

      rm  computeTypeStressImpl(...) { .... }
