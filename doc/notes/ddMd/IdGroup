--------------------------------------------------------------------------------
Proposal:

   - Rational: Interface of GroupStorage is generic except for functions that return 
     a pointer to Group<N>*. Some of these functions are used by the GroupDistributor
     and GroupExchanger classes to distribute and gather groups.

   - Proposal: Create a new class IdGroup which is a generic wrapper around a Group<N>,
     use this in the interface of GroupStorage rather than Group<N>.

   - Proposed class:

     class IdGroup {
     private:
       int* data_;
       int  N_;
     }

   - Add functions to assign and copy construct from Group<N> objects. Assignment
     to / from a Group<N> should copy the pointer and assign the correct value to N_.

   - Assignment to / from other IdGroups should copy data.

   - In GroupStorage interface, replace or supplment functions that return Group<N>*
     pointers and that are used by GroupDistributor and GroupCollector by functions
     that return instances of a new IdGroup.

   - Declare all functions required by GroupDistributor and GroupCollector in the
     GroupExchanger interface.

   - Add functions to abstract GroupStorage class:

     // Get size N of group
     virtual int GroupExchanger::groupSize() const;

     // Add an IdGroup to the underlying GroupStorage<N>
     virtual void GroupExchanger::addIdGroup(IdGroup& group);

     // Instantiate an IdGroupIterator of the appropriate subclass.
     virtual IdGroupIterator* GroupExchanger::iterator();

     // Initialize an IdGroupIterator
     virtual void GroupExchanger::begin(IdGroupIterator& );

