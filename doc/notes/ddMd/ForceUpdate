In order to get reverse communication working:

---------------------------------------------------------------------------
1) Add methods to Buffer to pack and unpack forces.

   Added FORCE value to enum Buffer::BlockDataType
   Added packForce(Atom& ) and unpackForce(Atom&)

   unpackForce method increments force;

   Status: Done, compiles, not tested.

   TODO: Add test methods to BufferTest
---------------------------------------------------------------------------
2) class Cell

   Pass forceCommFlag as an argument to Cell::getNeighbors, with
   a default value of false. Atoms in a neighboring cell should be 
   included in the array of neighbors according to condition:

   If forceCommFlag is true, include neighbors with higher cell ids.
   If forceCommFlag is false, also include ghost cells, as well as above.

   if (cellId > cellIdSelf || (forceCommFlag && isGhost)) { ... }

   Comment: For this to be correct, we must know that the relative
   order of any two cells is the same on all processors.  We are
   interested only in pairs of cells for which one is a local cell
   and the other is a ghost cell. Since each cell is owned by one
   processor, the same pair will appear on two processors. Given
   a pair of cells A and B, the difference id(A) - id(B) will be
   the same on both of these processors, since this difference is
   determined by the IntVector separation between the cells. 
   Therefore, each such pair will only be included on one of these
   two processors.

   Comment: This flag be passed by PairList::build, which calls 
   Cell::getNeighbors (Done, see below). It also needs to be called
   by methods of PairPotentialImpl that use the CellList directly
   (not done, see below).

   Status: Compiles, but not tested.

   TESTING: Count pairs both ways, assigning 1 for each local atom.
---------------------------------------------------------------------------
3) Modify PairList::build behavior to depend on flag.

   Add bool forceCommFlag argument to PairList::build(CellList&, bool)
   Pass flag to CellList::getNeighbors to build neighbors array of pointers.

   In PairList.h, make forceCommFlag = true by default.

   Comment: The construction of the pair list is based on the list of
   neighbors obtained from CellList::getNeighbors(), which depends on
   the rules for which cells to include that are imposed there. The
   resulting pair list will thus include only those neighboring cells
   included in the algorithm for CellList::getNeighbors.

   TESTING: Count pairs both ways, assigning 1 for each local atom.
---------------------------------------------------------------------------
4) Modify PairPotential class.

   Add bool forceCommFlag_ member to PairPotential. 
   Initialize to false in constructor.

   Add void PairPotential::setForceCommFlag(bool ) setter method.
   Add bool PairPotential::forceCommFlag() getter method.

   In readPairListParam, call pairList_.build(cellList_, forceCommFlag());
   In findNeighbors, pass forceCommFlag to Cell::findNeighbors.

   Status: Done, not tested.

   TODO: Add virtual int nInnerPair() method.

   TESTING: Trivial, test implementation below.
---------------------------------------------------------------------------
5) Modify PairPotentialImpl.h.

   Modify private energyList and addForcesList methods (which calculate
   energy and forces using a pair list), and energyCell and addForcesCell
   methods.

   -----------------
   PairList Methods:

   If forceCommFlag():

      In energyList, include total energy even if second atom is a ghost.
      In addForcesList, increment force on second atom even if it is a ghost.

   Status: Looks correct, compiles, but not tested.

   ----------------
   CellList method:

      Pass forceCommFlag() to getNeighbors in energyCell and addForceCell.
      If forceCommFlag():
         Include total energy for all neighbor pairs in energyCell
         Increment both atom forces for all pairs in addForcesCell

   Status: Looks correct, compiles, but not tested.

   ----------------
   NSq  method:

      if forceCommFlag():
         Include only local/ghost pairs for which id0 > id1.
         Include total energy for all such pairs in energyNSq
         Increment both forces for all such pairs in addForcesNSq
 
   TODO: Add nInnerPair methods with list, cellist, NSq implementations.

   TESTING: Test countPairs method first (no forceUpdate required).
            Then energies, using initial configuration (no forceUpdate).
            Forces, initial configuration (add forceUpdate to test)
            Forces, cycle.
        

---------------------------------------------------------------------------
6) Exchanger class

   Add Exchanger::forceUpdate() method to send all forces back along 
   reverse path.

   // Loop over i and j in reverse order
   for (i = Dimension - 1; i>= 0; --i) {
      for (j =1; j>= 0; --j) {

         if (multiProcessorDimension_[i]) {
            Packs forces from atoms in recvArray_(i, j);
            Reverses source and dest ranks;
            Unpacks forces from atoms in recvArray_(i, j);
         } else {
            Use forces in recvArray_ atoms to increment those
            in sendArray_ atoms
         }
      }
   }

   Add new values to timer enumeration.

   Status: Compiles, not tested.

   TESTING: Test together with PairPotentialImpl.
            Is there any way to test this in isolation?

---------------------------------------------------------------------------
7) MdIntegrator class

   add bool member forceCommFlag_ to MdIntegrator. Add setter and getter.

   Modify subclasses so as to call Exchanger::forceUpdate after 
   calculating forces.

   Possible alternatives: 

   1) Make forceCommFlag_ a local variable of the run method, copied from the 
   parent Simulation.

   2) Query the pair-potential for the value of the forceCommFlag_

   3) Use a pointer for value of flag in both MdIntegrator and PairPotential.
   Then set a global value somewhere else (i.e,. in DdMd::Simulation).

   Status: Not done

-------------------------------------------------------------------------
8) Simulation class

   Add bool forceCommFlag to DdMd::Simulation. Make setter function 
   sets values for Integrator and PairPotential.

   Modify DdMd::Simulation::zeroForces so as to zero ghost forces iff
   Simulation::forceCommFlag is set.

   Status: Not done

-----------------------------------------------------------------------

Stage #1: Use reverse communication for pair forces, and nothing else.
---------

 - Leave selection of ghosts in Exchanger unchanged. It's okay if we 
   send some unnecessary ghost - this should not effect correctness.

 - Leave covalent potentials unchanged: It's okay if we use reverse 
   update only for pairs, and repeat the force calculation for bonded
   interactions.

 - Unit test by adding tests that involves the pair potential to 
   ddMd/communicate/tests/ExchangerTest.h

Stage #2:
--------

 - Add velocityCommunicateFlag, and allow for possible forward
   communication of velocities.

 - Test DPD integrator

Stage #3:
--------

 - Suppress communication of (some) unnecesary nonbonded ghosts.


Stage #4: Reverse communication for bonded forces (if desired)
---------

  - Modify exchanger to keep covalent groups only on one processor.
    The group migrates with the "owner" atom.

  - Modify covalent potentials to calculate forces for all atoms in 
    Group, if forceCommFlag.

  - Send only necesary bonded ghosts.
