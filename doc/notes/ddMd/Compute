Idea:

  Generalize the idea of a "Setable" to allow it to compute itself. Each 
class that owns or has responsibility for a Setable function would then 
provide access to the corresponding "Compute" subclass, which would provide 
methods to compute whatever is needed.

Problem: 

  Without some care, this would tend to move the code to actually compute 
something out of the class that is responsible for the computation (e.g.,
potential energy class or the simulation) and into the compute class. The
two classes would become horrible intertwined. How to avoid this?

Proposal:

  Computes that are closely associated with parent classes could be
declared as friends of the parent class. The parent class could then
provide private functions to compute the quantity of interest. The
advantage of this is that it would standardize the interface for
computing a particular quantity. The parent class could also be 
declared a friend of the compute, so that only the parent class has
permission to set the value or call the compute function.

  The implementation of a compute could use a private Setable function.
and a pure virtual compute function.



