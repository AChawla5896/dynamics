-------------------------------------------------------------------------------
Existing classes in mcMd/potentials/coulomb:

   CoulombPotential : ParamComposite
   -> Base class for CoulombPotentials (i.e., k-space potentials)
  
   EwaldCoulombPotential : CoulombPotential, CoulombSystemMixIn
   -> Implementation of CoulombPotential
  
   EwaldCoulombPair 
   -> Pair interaction for short range Ewald Coulomb interaction
  
   CoulombPotential has an associated EwaldCoulombPair, which is set by 
   the setPairInteraction() method. CoulombPotential is also a friend of
   EwaldCoulombPair, and so can modify its parameters. 

   MdCoulombPairPotential<PairInteraction, CoulombInteraction>

-------------------------------------------------------------------------------
General problems:

   Coordination of parameters (e.g., alpha and epsilon) for real-space and 
   k-space potentials requires a link between them.

   It would be nice if the solution allowed mixed potentials other than Coulomb.

   The use of polymorphic base classes for the potentials make it hard to
   create such a link: How can a link be created without knowing what 
   information must be shared?

   Possibility: Pass parameter using the Observer pattern with an array of 
   doubles. May require additional virtual method or methods in PairPotential 
   base class as well as in the KSpace potential class. The implementation
   of these methods could rely on casting to a specific subclass. 

   The constructor for the KSpace class could require access to a pointer
   to the pair class. 

-------------------------------------------------------------------------------
Proposal changes:

   New Base Classes:

   KSpacePotential : public ParamComposite
                   -> public pure virtual global compute functions
                   -> public accessors for k-space energy and pressure
                   -> protected data

   RSpacePotential : public ParamComposite
                   -> No compute functions (combined in PairPotentialImpl)
                   -> public accumulators and accessors for r-space
                   -> protected data

   KRSpacePotential : public ParamComposite

      -> virtual public accessor kSpace()
      -> virtual public accessor rSpace()

   -----------------------------------------------------------------------------
   Implementation classes:

   template <class PairInteraction, CoulombInteraction>
   class MdCoulombPairPotentialImpl<PairInteraction, CoulombInteraction> : 
                                    public CoulombRSpacePotential

   CoulombKSpacePotential : public KSpacePotential
   {}

   CoulombPotential : public KRSpacePotential
   {

      CoulombPotential(PairPotential& pair)
      {
          // Dynamic cast to required type. 
      }
   
   private:

      CoulomKSpacePotential  kspace_;
      CoulomRSpacePotential* rspacePtr_;
   }
