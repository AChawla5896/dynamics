----------------------------------------------------------------------
Existing classes in mcMd/potentials/coulomb:

   CoulombPotential : ParamComposite
   -> Base class for coulomb potentials (i.e., k-space potentials)

   Proposal: Change name of CoulombPotential to LongRangePotential to
   indicate usability for, e.g., dipolar forces, long range 1/r^6 etc.
   This is also close to the convention in Lammps.

   EwaldCoulombPotential : CoulombPotential, CoulombSystemMixIn
   -> Implementation of CoulombPotential
  
   EwaldCoulombPair 
   -> Pair interaction for short range Ewald Coulomb interaction
  
   CoulombPotential has an associated EwaldCoulombPair, which is set 
   by the setPairInteraction() method. CoulombPotential is also a 
   friend of EwaldCoulombPair, and so can modify its parameters. 

   MdCoulombPairPotential<PairInteraction, CoulombInteraction>

---------------------------------------------------------------------
Proposed design:

   Principles:

   1) Both LongRangePotential and PairPotential classes have a 
   hierarchy with an abstract base class that defines an
   interface and implementation classes or template that 
   define nuts and bolts of the implementation.

   2) Short-range non-Coulomb and short range part of Coulomb
   forces are computed in the same loop by template instantiation
   MdCoulombPairPotential<PairInteraction, CoulombPairInteraction>

   3) Values for physical and algorithm parameters associated with 
    Coulomb interactions are input in the LongRangePotential part 
    of the parameter file, but are shared as needed with the 
    PairPotential class (mechanism discussed below).

   4) LongRangePotential part of the parameter file should appear
   in the parameter file, if at all, as the first potential
   energy block, before the PairPotential block. 

   4) Data is shared between the pair and long-range implementation
   classes by an instance of a specialized structure called something
   like EwaldSharedData. EwaldSharedData provides places to store:

      - Physical Coulomb parameters (e.g., dielectric constant)
      - Shared algorithmic Coulomb parameters (e.g., alpha and r cutoff)
      - Accumulated values of r-space contributions to Coulomb 
        energy and stress


   5) EwaldCoulombPotential is derived from EwaldSharedData, as a
      private base class.

      Physical and algorithmic input parameter members of EwaldShared
      Data are declared protected, and energy and stress accumulators
      are declared public. 

      EwaldCoulombPotential will have a public member sharedData()
      that returns the EwaldSharedData as a non-const reference.

   6) MdPairPotential<Pair, RSpace> has a private pointer to the 
      EwaldSharedData base class of the EwaldPotential. The pointer 
      is passed in the factory that creates the pair potential object 
      using a constructor that takes a references to the LongRangePotential
      as an argument. This constructor will have to use a dynamic cast
      of LongRangePotential to EwaldColumbPotential to get a pointer to a
      EwaldCoulombPotential, and then access the sharedData() member to
      get the address of the EwaldSharedData object.


   7) Values of the energy and stress arising from the non-coulombic
      pair potential will be accumulated separately from those arising
      from the r-space part of the coulomb / kspace potential. The
      short range coulomb parts will be accumulated in values that
      are members of EwaldSharedData, and so will be accessible in
      the EwaldCoulombPotential.  

    8) The KSpace potential will provide accessors to allow access
       to either KSpace and RSpace components of energy and stress
       separately, or just the total, to allow public access to
       some results broken down in a way needed to test algorihms.

    9) The energy and stress accessors of the PairPotential class
       will only report the non-coulombic (e.g., Lennard-Jones)
       contributions, leaving it to the KSpace potential to return
       values of the short-range Coulombic contributions.

-------------------------------------------------------------------
       Class sketches:

   /// Abstract base class for potentials with K-space part
   /// Interface class - no data
   LongRangePotential : public ParamComposite
   {
   public:

       /// Add K-Space forces
       void addForces();

       /// Compute KSpace energy and stress components
       void computeKSpaceEnergy();
       void computeKSpaceStress();

       // Return total energy and stress
       double energy();
       void getStress(double& pressure);
       void getStress(Vector& stress);
       void getStress(Tensor& stress);

       // Return K-space contributions
       double kspaceEnergy();
       void getKSpaceStress(Tensor& stress);

       // Return R-space contributions
       double rSpaceEnergy();
       void getRSpaceStress(Tensor& stress);

   }

   /// Class template for sharing data between pair and kspace potentials
   class EwaldSharedData 
   {
    public:

       // Accumulators for short-range parts of energy and stress
       double rSpaceEnergy_;
       Tensor rSpaceStress_;

    protected:

       // Algorithmic parameters
       double alpha_;

       // Physical Parameters
       double epsilon_;

   }

   /// Ewald Coulomb pair interaction class (similar to LJPair)
   class EwaldCoulombPairInteraction : public ParamComposite
   {
      void setSharedData(EwaldSharedData& data);
   }

   /**
   * Ewald Coulomb potential concrete class
   */
   EwaldCoulombPotential : public LongRangePotential
   {
   public:

      // Constructor
      EwaldCoulombPotential(System& )
      {}

      /// Add K-Space forces
      void addForces();

      /// Compute KSpace energy and stress components
      void computeKSpaceEnergy();
      void computeKSpaceStress();

      // Return total Coulomb energy and stress (kspace + rspace)
      double energy();
      void getStress(double& pressure);
      void getStress(Vector& stress);
      void getStress(Tensor& stress);

      // Return K-space contributions
      double kspaceEnergy();
      void getKSpaceStress(Tensor& stress);

      // Return R-space contributions
      double rSpaceEnergy();
      void getRSpaceStress(Tensor& stress);

      // Return pointer to shared EwaldSharedBase part
      EwaldSharedData& sharedData()
      {
         EwaldSharedData* ptr = this;
         return &ptr;
      }

   }

   /// Pair potential class template
   template <class PairInteraction, CoulombInteraction>
   class MdCoulombPairPotentialImpl<PairInteraction, CoulombInteraction> 
    : public MdPairPotential
   {

      MdCoulombPotentialImpl(System& system)
      {
         /// Get pointer to LongRangePotential.
         LongRangePotential* lrPtr = 0;
         lrPtr = &system.longRangePotential();

         /// Dynamic cast to a pointer to EwaldCoulombPotential.
         EwaldCoulombPotential* ewaldPtr = 0; 
         ewaldPtr = dynamic_cast<EwaldCoulombPotential*>(lrPtr);

         // Get pointer to EwaldSharedData part 
         sharedPtr = &(ewaldPtr->sharedData());
      }

      // Force evaluation, which adds both types of pair force.
      virtual void addForces();

      /** 
      * Thermo computes, which increment different accumulator variables.
      * Conventional nonbonded pair energy and stress are added to member
      * variables of this class.  Ewald RSpace energy and stress are 
      * added corresponding members of EwaldSharedData.
      */
      virtual void computeEnergy();
      virtual void computeStress(double& stress);
      virtual void computeStress(Vector& stress);
      virtual void computeStress(Tensor& stress);

   private:

      EwaldSharedData* sharedDataPtr_;

   }

