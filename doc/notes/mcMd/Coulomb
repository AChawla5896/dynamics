-------------------------------------------------------------------------------
Existing classes in mcMd/potentials/coulomb:

   CoulombPotential : ParamComposite
   -> Base class for CoulombPotentials (i.e., k-space potentials)
  
   EwaldCoulombPotential : CoulombPotential, CoulombSystemMixIn
   -> Implementation of CoulombPotential
  
   EwaldCoulombPair 
   -> Pair interaction for short range Ewald Coulomb interaction
  
   CoulombPotential has an associated EwaldCoulombPair, which is set by 
   the setPairInteraction() method. CoulombPotential is also a friend of
   EwaldCoulombPair, and so can modify its parameters. 

   MdCoulombPairPotential<PairInteraction, CoulombInteraction>

---------------------------------------------------------------------
Proposed changes:

   /// Abstract base class for potentials with K-space part
   /// Interface class - no data
   KSpacePotential : public ParamComposite
       -> public pure virtual addForce() function
       -> public pure virtual global computeEnergy() and computeStress() functions
       -> public pure virtual accessors for kspaceEnergy() and kspaceStress()
       -> public upre virtual accessors for rspaceEnergy() and rspaceStress()

   /// Class template for sharing data between pair and kspace potentials
   template <class CoulombInteraction>
   RSpacePotentialData <CoulombInteraction> : public ParamComposite
       -> No compute functions 
       -> public accessors energy() and stress() for r-space accumulators
       -> public accessor for CoulombInteraction
       -> protected energy_ and stress_ member data accumulators

   /// Ewald Coulomb pair interaction class (similar to LJPair)
   class EwaldCoulombPairInteraction : public ParamComposite

   /// Pair potential class template
   template <class PairInteraction, CoulombInteraction>
   class MdCoulombPairPotentialImpl<PairInteraction, CoulombInteraction> 
    : public RSpacePotentialData<CoulombInteraction>
   {

       // Single loop for force evaluation, which adds both types of pair force.
       void addForces();

       void computeEnergy();
       void computeStress();

       // Single loop for energy and stress functions, but add increments to separate
       // accumulator variables. CoulombInteraction energy and stress accumulated in
       // protected data members of RSpacePotentialData<CoulombInteraction> base class.
   }

   /// Coulomb potential concrete class
   EwaldCoulombPotential : public KSpacePotential
   {
   public:

       // Constructor
       EwaldCoulombPotential(MdPairPotential& ){
          // static cast to RSpacePotentialData<EwaldCoulombPairInteraction>* pointer.
       }

       // Implement kspaceEnergy() and kspaceStress().

       // Implement rspaceEnergy() and rspaceStress() as call through functions
       // to corresponding functions of RSpacePotentialData<EwaldCoulombPairInteraction>

    private:

       RSpacePotentialData<EwaldCoulombPairInteraction>* rSpaceDataPtr_;

    }
