Proposed design:

---------------------------------------------------------------------
  Classes:

   // Abstract base class for Fourier space potentials for MD
   class MdCoulombPotential 

   // Base class to hold Ewald rspace parameters 
   class EwaldParameters;

   // MD Ewald implementation 
   // Note: Has a private pointer to EwaldRSpaceAccumulator
   class EwaldPotential : public MdCoulombPotential, 
                          public EwaldParameters

   // Abstract base class for Md Pair Potentials
   // Note: Interface makes no reference to Coulomb potential
   class MdPairPotential;

   // Class to hold Ewald rspace energy and stress accumulators
   class EwaldRSpaceAccumulator;

   // Pair Interaction for short range part of Ewald.
   // Note: Holds a pointer to EwaldParameters base class.
   class EwaldPair;

   // Implementation for Ewald + nonCoulomb Pair
   // Note: Has a Pair and an EwaldPair
   template <class Pair>
   class MdEwaldPairPotentialImpl<Pair> 
    : public MdPairPotential, public MdRSpaceAccumulator

---------------------------------------------------------------------
   Principles:

   1) MdCoulombPotential and PairPotential are abstract base classes 
   with functions that are implemented by concrete subclasses
   MdEwaldPotential and MdEwaldPairPotentialImpl<Pair>, respectively.

   2) Short-range non-Coulomb pair potentials and short range part 
   of the Coulomb potential are computed in the same loop by template 
   instantiation MdEwaldPairPotentialImpl<Pair>. Corresponding energy
   and stress components are, however, stored in different
   accumulators.

   3) Values for physical and algorithm parameters associated 
   with Coulomb interactions are input in the CoulombPotential 
   part of the parameter file, but are shared as needed with the 
   MdEwaldPairPotentialImpl<Pair> class (mechanism described below).

   4) MdCoulombPotential part of the parameter file should appear
   first in the parameter file, if at all, before the MdPairPotential 
   block. This allows the code that reads the PairPotential block of 
   the parameter file to make decisions regarding, e.g., the Verlet
   list cutoff, based on full knowledge of the rSpaceCutoff of the 
   Ewald algorithm.

   5) EwaldParameters has public member functions to access values 
   of the physical and algorithmic parameters required to define 
   the r-space and k-space parts of the Coulomb potential, namely 
   dielectric constant, alpha, r-space cutoff and the k-Space cutoff
   or grid. These variables are all protected members so that they 
   can be modified by the MdEwaldPotential derived class.

   6) EwaldRSpaceAccumulator provides public member functions to
   access rSpace energy and stress accumulators. These accumulators
   are Setable<Type> protected members, so that they can be modified
   by the MdEwaldPairPotentialImpl<Pair> derived class.

   7) The EwaldPotential has a pointer to the EwaldRSpaceAccumulator
   base class of MdEwaldPairPotentialImpl<Pair>. Similarly, the
   EwaldPair has a pointer to the EwaldParameters base class of 
   MdEwaldPotential. The required addresses are obtained in each 
   case by using a dynamic cast of a pointer to the base class 
   to the relevant implementation subclass, and then casting this 
   to a pointer to a base class.  (See class skeletons for details).

   8) The energy and stress accessors of the MdPairPotential base
   class, which are implemented by the MdEwaldPairPotentialImpl<Pair>
   template, return values of the non-coulombic (e.g., Lennard-Jones)
   part of the pair potential. A separate set of non-iherited 
   functions of MdEwaldPairPotentialImpl<Pair> provide public 
   access to the rspace part of the coulomb energy and stress. 
   
-------------------------------------------------------------------
   Class sketches:

   /// Abstract base class for potentials with K-space part
   /// Interface class - no data
   MdCoulombPotential : public ParamComposite
   {
   public:

       void setPairPotential(MdPairPotential& pairPotential) = 0;

       // Add K-Space forces
       virtual void addForces() = 0;

       // Compute KSpace energy and stress components
       virtual void computeEnergy() = 0;
       virtual void computeStress() = 0;

       // Unset accumulators for kspace energy and stress components.
       virtual void unsetEnergy();
       virtual void unsetSress();

       // Return total energy and stress
       virtual double energy() const = 0;
       virtual double pressure() const = 0;
       virtual Tensor stress() const = 0;

       // Return K-space contributions
       virtual double kSpaceEnergy() const = 0;
       virtual double kSpacePressure() const = 0;
       virtual Tensor kSpaceStress() const = 0;

       // Return R-space contributions
       virtual double rSpaceEnergy() const = 0;
       virtual double rSpacePressure() const = 0;
       virtual Tensor rSpaceStress() const = 0;

       // Note: Public functions are needed to return rspace components 
       // are needed in this base class because the MdPairPotential base 
       // class interface does not provide access to these values, and
       // public interface of the MdSystem provides access to the 
       // MdEwaldPairPotentialImpl<Pair> only through a pointer to the 
       // MdPairPotential base class. It makes sense to provide such
       // accessors in the interface of MdKSpacePotential rather than
       // MdPairPotential because they are specifci to Coulomb
       // interactions, and to division into KSpace and RSpace 
       // components that is characteristic of the Ewald method.

   }


   class EwaldParameters
   {
   public:

      double alpha() const 
      {  return alpha_; }

      double epsilon() const 
      {  return alpha_; }

      double rSpaceCutoff() const 
      {  return rSpaceCutoff_; }

   protected:

      // Physical Parameters
      double epsilon_;

      // Algorithmic parameters
      double alpha_;
      double rSpaceCutoff_;

      // Need some way of specifying k-space cutoff, either
      // as a value or dimensions of a grid.

   }


   /**
   * Ewald KSpace Coulomb potential implementation class
   */
   MdEwaldPotential : public MdCoulombPotential, 
                      public EwaldParameters
   {
   public:

      // Constructor
      MdEwaldPotential(System& system)
      {}

      // Add K-Space forces
      void addForces();

      // Compute KSpace energy and stress components (inherited)
      void computeEnergy();
      void computeStress();

      // Unset KSpace energy and stress components (inherited)
      void unsetEnergy();
      void unsetStress();

      // Return total Coulomb energy and stress (kspace + rspace)
      double energy();
      double pressure();
      Tensor stress();

      // Return K-space contributions (inherited)
      double kspaceEnergy();
      double kSpacePressure();
      Tensor kSpaceStress();

      // Return R-space contributions (inherited)
      double rSpaceEnergy()
      { return rspaceAccumulatorPtr_->rSpaceEnergy(); }

      double kSpacePressure();

      Tensor kSpaceStress();
      { return rspaceAccumulatorPtr_->rSpaceStress(); }

      /*
      * All accessor functions can be designed so that they throw
      * Exceptions upon any attempt to access the value of a 
      * Setable parameter that is not set. The accessors for total
      * energy and stress should throw Exceptions if either kspace
      * or rSpace component is not set. 
      */

    private:

      // KSpace part of Coulomb energy
      Setable<double> pairEnergy_;

      // KSpace part of Coulomb stress.
      Setable<Tensor> pairStress_;

      // Pointer to accumulator part of MdEwaldPairPotentialImpl
      EwaldRSpaceAccumulator* rSpaceAccumulatorPtr_;
   }


   /// Ewald Coulomb pair interaction class (analogous to LJPair)
   class EwaldPair : public ParamComposite
   {
   public:

      void setParams(EwaldParameters& ewaldParams)
      {  ewaldParamPtr_ = & ewaldParams; }

      EwaldParameters const & parameters() const
      { return *ewaldParamPtr_; }

      // Other functions typical of a pair interaction class

   private:

      EwaldParameters* ewaldParamPtr_;

   }

   /// Base class holding Ewald RSpace energy & stress accumulators
   class EwaldRSpaceAccumulator
   {

      // Check if energy and stress accumulators are set.

      void isSetEnergy() const
      {  return rSpaceEnergy_.isSet(); }

      void isSetStress() const
      { return rSpaceStress_.isSet(); }

      // Note: Because non-Coulombic and Ewald rSpace accumulators
      // are set and unset together in MdEwaldPairPotentialImpl, 
      // it is only necessary to check the rSpace accumulators
      // to know the state of both accumulators.

      double rSpaceEnergy() const
      { return rSpaceEnergy_.value(); }

      Tensor rSpaceStress() const
      { return rSpaceStress_.value(); }

      Tensor rSpacePressure() const;

   protected:

      Setable<double> rSpaceEnergy_;  
      Setable<Tensor> rSpaceStress_;  

   }


   /**
   * Implementation of a pair potential for a charged system.
   *
   * This class computes forces and energies for all short ranged
   * pair interactions for a charged system, including both   
   * non-Coulomb (e.g., Lennard-Jones) pair interactions and the
   * short range part of the Coulomb interaction in the Ewald method.
   * The addForces() method adds both types of forces to atom forces,
   * but separate accessors are given for non-Coulombic and short
   * range Coulomb contributions to energy and stress.
   */
   template <class Pair>
   class MdEwaldPairPotentialImpl<Pair>
    : public MdPairPotential, public EwaldRSpaceAccumulator
   {

      MdEwaldPairPotentialImpl(MdSystem& system)
      {
         // Get pointer to MdCoulombPotential.
         MdCoulombPotential* kspacePtr = 0;
         kspacePtr = &system.kspacePotential();

         // Dynamic cast to a pointer to MdEwaldPotential.
         MdEwaldPotential* ewaldPtr = 0; 
         ewaldPtr = dynamic_cast<MdEwaldPotential*>(kspacePtr);

         // Pass address of MdEwaldPotential to EwaldPair interaction.
         // Note: Uses implicit cast of MdEwaldPotential to its
         // EwaldParameters base class.
         ewaldPair.setParams(*ewaldPtr);
      }

      // Force evaluation, which adds both types of pair force.
      virtual void addForces();

      /** 
      * Thermo computes, which computes nonCoulombic and coulombic
      * parts, but stores them in different accumulator variables.
      * The implementation should also mark both accumulators as set.
      */
      virtual void computeEnergy();
      virtual void computeStress();

      // Unset both energy accumulators.
      void unsetEnergy();
      { 
         pairEnergy_.unset(); 
         rSpaceEnergy_.unset(); 
      }

      // Unset both stress accumulators.
      void unsetStress();
      { 
         pairStress_.unset(); 
         rSpaceStress_.unset(); 
      }

      double rSpaceEnergy() const
      {  return rSpaceEnergy_.value(); }

      // Get non-coulombic pair stress.
      Tensor stress()
      {  return pairStress_.value(); }

      // Get non-coulombic pair pressure.
      double pressure();

   private:

      // Non-Coulombic pair interaction
      Pair pair_;

      // Ewald short-range pair Interaction
      EwaldPair ewaldPair_;

      // Non-Coulomb pair accumulators
      Setable<double> pairEnergy_;  
      Setable<Tensor> pairStress_; 

   }

