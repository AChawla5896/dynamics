-------------------------------------------------------------------------------
Existing classes in mcMd/potentials/coulomb:

   CoulombPotential : ParamComposite
   -> Base class for CoulombPotentials (i.e., k-space potentials)
  
   EwaldCoulombPotential : CoulombPotential, CoulombSystemMixIn
   -> Implementation of CoulombPotential
  
   EwaldCoulombPair 
   -> Pair interaction for short range Ewald Coulomb interaction
  
   CoulombPotential has an associated EwaldCoulombPair, which is set by 
   the setPairInteraction() method. CoulombPotential is also a friend of
   EwaldCoulombPair, and so can modify its parameters. 

   MdCoulombPairPotential<PairInteraction, CoulombInteraction>

---------------------------------------------------------------------
Proposed changes:

   /// Abstract base class for potentials with K-space part
   /// Interface class - no data
   KSpacePotential : public ParamComposite
       -> public pure virtual addForce() function
       -> public pure virtual computeEnergy() and computeStress() functions
       -> public pure virtual accessors kspaceEnergy() and kspaceStress()
       -> public upre virtual accessors rspaceEnergy() and rspaceStress()

   /// Class template for sharing data between pair and kspace potentials
   template <class CoulombInteraction>
   RSpacePotentialData <CoulombInteraction> : public ParamComposite
       -> No compute functions 
       -> public accessors energy() and stress() for r-space accumulators
       -> public accessor for CoulombInteraction
       -> protected energy_ and stress_ member data accumulators

   /// Ewald Coulomb pair interaction class (similar to LJPair)
   class EwaldCoulombPairInteraction : public ParamComposite

   /// Pair potential class template
   template <class PairInteraction, CoulombInteraction>
   class MdCoulombPairPotentialImpl<PairInteraction, CoulombInteraction> 
    : public RSpacePotentialData<CoulombInteraction>
   {

       // Force evaluation, which adds both types of pair force.
       virtual void addForces();
       
       /** 
       * Thermo computes, which increment different accumulator variables.
       * Conventional nonbonded pair energy and stress are added to member
       * variables of this class.  Ewald RSpace energy and stress are 
       * added corresponding protected data members of the base class
       * RSpacePotentialData<CoulombInteraction>.
       */
       virtual void computeEnergy();
       virtual void computeStress();

       // Accessors for nonbonded non-Ewald coulomb energy and stress.
       double energy();
       double pressure();
       Tensor& stress();
   }

   /**
   * Ewald Coulomb potential concrete class
   */
   EwaldCoulombPotential : public KSpacePotential
   {
   public:

       // Constructor
       EwaldCoulombPotential(MdPairPotential& )
       {
          // cast to RSpacePotentialData<EwaldCoulombPairInteraction>* pointer.
          // Retain address in private pointer variable.
       }

       /// Add K-Space forces
       void addForces();

       /// Compute K-Space forces
       void computeEnergy();
       void computeStress();

       // Return total Coulomb energy and stress
       double energy();
       void stress(double& pressure);
       void stress(tensor& stress);
  
       // Return K-space contributions
       double kspaceEnergy();
       void stress(double& pressure);
       void stress(Tensor& stress);

       // Return R-space contributions
       double rspaceEnergy();
       void rspaceStress(double& pressure);
       void rspaceStress(Tensor& stress);

    private:

       RSpacePotentialData<EwaldCoulombPairInteraction>* rSpaceDataPtr_;

    }
