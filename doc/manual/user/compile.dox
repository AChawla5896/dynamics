/*! \page user_compile_page 2.1 Compilation

\ref user_usage_page (Next) 
<BR>

Simpatico is distributed only as source code, and must be compiled by the user. All source code is written in ANSI 1998 standard C++. It has been developed and tested using the gcc and intel compilers in a linux environment, and with the gcc compiler in Mac OS X.  It should compile with any modern, standard compliant C++ compiler.   

The single-processor programs mcSim and mdSim have no external dependencies.  A Message Passing Interface (MPI) library is required to compile the ddSim parallel MD program. An MPI library is also required to create multiprocessor versions of mcSim and mdSim, for parallel simulations in which different systems run on different processors. 

The build system uses unix makefiles, and was developed using the gnu version of make (gmake).

\section compile_getcode_section Getting the source code

The source code for simpatico is hosted on <a href=http://github.com>github</a>, as project dmorse/simpatico.  The source files may be obtained either by downloading a tar file from the (very simple) <a href=http://dmorse.github.com/simpatico/index.html>home page</a> or by using a git client to clone the public <a href=https://github.com/dmorse/simpatico>git repository</a>. 

To clone the git repository, after installing a git client on your home machine, cd to the directory you wish to contain the simpatico root directory, and enter:
\code
> git clone git://github.com/dmorse/simpatico.git
\endcode
This should create a copy of the repository in a new subdirectory of the working directory, which will be named simpatico.

To extract the code from a tar file that was downloaded from the home page, move the tar file to the directory that should contain the simpatico root directory, and then enter "tar -xvf filename" from this directory, where "filename" denotes the name of the gzipped tar file. This will create a subdirectory named dmorse-simpatico-ID/, where "ID" represents a hexadecimal identifier for the most recent commit in the git repository. We recommend that you immediately rename this directory "simpatico/", which is the name of the corresponding directory in the repository. 

Throughout this documentation, we assume that the root project directory is named simpatico/.  References to paths that do not start explicitly with "simpatico/" should be understood to be relative paths, relative to this root directory. The directory structure is explained \ref source_directory_page "here".

\section compile_short_section Short instructions

Here is a brief summary of instructions for compiling all of the simpatico programs:

   - Add simpatico/bin to the users PATH, and 
     add simpatico/tools/python to PYTHONPATH

   - cd simpatico/ (i.e., to the simpatico root directory)

   - ./setup

   - make mcMd

   - Check MPI settings in build/parallel/config.mk

   - make ddMd 

   - make mcMd-mpi 

The setup script and all three "make" commands must be executed from the simpatico root directory. The command "make mcMd" builds the single-processor programs mcSim and mdSim. The command "make ddMd" builds ddSim, while "make mcMd-mpi" builds multi-processor versions of mcSim and mdSim. 

Each of the above steps is discussed in more detail below. 

\section compile_environment_section Set environment variables

Before compiling any code, you should:

  - Add simpatico/bin to the PATH shell environment variable (the shell command search path)

  - Add simpatico/tools/python to the PYTHONPATH environment variable (the python module search path)

To do this, you must add some variant of the following lines to your the .profile or .bash_profile file in your home directory:
\code
SIMPATICO_DIR=${HOME}/simpatico
export PATH=${PATH}:/${SIMPATICO_DIR}/bin
export PYTHONPATH=${PYTHONPATH}:/${SIMPATICO_DIR}/tools/python
\endcode
The value of SIMPATICO_DIR should be set to the path to the simpatico root directory. As an example, this is taken here to be a subdirectory of the home directory. After adding an appropriate variant of these lines to .profile or .bash_profile, log out, log back in, and then enter "echo $PATH" and "echo $PYTHONPATH" to make sure that these variables have been set correctly. 

Purpose: 

The simpatico/bin directory is the default location of all executable files. It must be added to the users PATH to allow the operating system to find the executables.

The simpatico/tools/python directory must be in the PYTHONPATH to allow the build system to generate information about dependencies among C++ files during compilation. The system used by simpatico to generate information about inter-file dependencies uses a python module that is located in this directory. Automatic dependency generation is discussed in more detail \ref compile_dependency_section "below".

\section compile_setup_section Setup script

After obtaining the source code, but before attempting to compile any files, you must run a bash script named "setup". This script is located in the root simpatico/ directory, and must be executed from within this directory. Thus, starting from the directory that contain the simpatico/ root directory, you would enter:
\code
> cd simpatico
> ./setup
\endcode
The period and backslash in "./setup" are required to specify the location of the script (in the current directory).

Purpose: The setup script creates initial user versions of several build configuration files (named config.mk) and C++ files that are required for compilation, but that users may need to modify. The identity and content of these configuration files is discussed below (\ref compile_makefile_section). The setup script should only need to be invoked once, before compiling any source code. After the setup script has been run, many further changes to the system configuration can be made using a separate "configure" script, as discussed \ref compile_configure_section "below".

\section compile_build_directories_section Object Directories 

When make is invoked from the simpatico/ root directory, as described above, compiled object files that are created during compilation are placed in two subdirectories of the simpatico/obj/ directory. Files that are created during compilation of the serial mcSim and mdSim programs, which do not require an MPI library, are placed in the directory simpatico/build/serial/. Object files that are created during compilation of the ddSim parallel MD program, and of the multi-processor versions of mcSim and mdSim, are instead placed in simpatico/build/parallel. 

It is also possible to execute an in-source build, in which object files are placed in the source directory, alongside corresponding source files. This is done, if desired, by invoking make from the simpatico/src directory, rather than from the root directory, using the same three primary makefile target names (i.e., "make mcMd", "make ddMd", and "make mcMd-mpi"). 

After the setup script is run, both object directories (build/serial and build/parallel) and the src/ directory each contain a build configuration file named config.mk. After running the setup script, inspect these files. In each of them, the value of the makefile variable ROOT_DIR should be set to the absolute path to the simpatico/ root directory on your machine. If you move the simpatico/ root directory after running "setup", you will need to either manually edit this variable in all of these files, or rerun the setup script.

\section compile_mcMd_section Compile mcSim and mdSim

As a first step, try compiling the single-processor versions of the mcSim and mdSim programs, using the default gcc compiler with a default set of features enabled. To do this, after running the setup script (see above), simply enter:
\code
> make mcMd
\endcode
from the root simpatico/ directory.  This command should create executables named mcSim and mdSim for MC and MD simulations in the simpatico/bin directory. 

The "make mcMd" command will: (1) compile all of the *.cpp source files in the src/util, src/inter, and src/mcMd directories and place resulting *.o object files in corresponding subdirectories of obj/serial, (2) create three corresponding static library files, which are also placed in obj/serial, and (3) compile and link the main programs src/mcMd/mcSimp.cpp and src/mcMd/mdSim.cpp to create the executables in the bin/ directory.

To remove all of the object files, libraries, and executable files created by "make mcMd", cd to the obj/serial directory and enter
"make clean" from there.

\section compile_configure_section Choosing optional features

As already noted, above instructions will compile default versions of mcSim and mdSim, using the gnu g++ compiler as a default compiler. The obj/serial, obj/parallel, obj/ directories each contain both a configuration file named config.mk which users may edit to change the choice of compiler and/or compiler options for programs that are built in the corersponding object directory. Each of these three directories also contains a bash script named "configure". The configure script can be used to enable or disable optional features, i.e.,  features that can be included or excluded at compile time using conditional compilation.

The "config.mk" file and "configure" script in each of these directories control the compiler options and features only for code that is built in the object directory containing these files. The "config.mk" file and "configure" script in the obj/parallel directory thus only effect settings for serial versions of mcSim and mdSim that are built in that directory, while those in the obj/parallel directory effect settings for parallel programs that are built there. 

As an introduction to the ./configure script, cd to obj/serial and enter
\code
> ./configure -q
\endcode
Invoking a configure script with the -q option prints a list of which features are currently enabled, and what compiler is being used. Immediately after running the setup script, it should produce an output that looks like this:
\code
-m OFF - MPI
-g OFF - debugging
-a ON  - bond potential
-a OFF - angle potential
-d OFF - dihedral potential
-e OFF - external potential
-l OFF - links (mutable bonds)
-s OFF - shift
-k ON  - automatic dependency tracking
COMPILER:=gcc
\endcode
Every line except the last shows whether an optional feature is currently enabled (ON) or disabled (OFF). The last line gives an identifier for the current compiler (gcc, by default). The output of the configure script in the obj/parallel directory should look similiar, except that it should indicate that MPI is ON (enabled). 

Each line in this output that is associated with an optional feature begins with the command line option (a dash followed by a letter) that can be used to enable or disable that feature. For example, debugging is enabled or disabled using the "-g" option of the configure script. A feature is enabled by invoking configure using the associated option followed by "1", or disabled by invoking the option followed by a "0". Thus, for example, to enable debugging (and thus run more exhaustive logic checks during execution), you would enter
\code 
> ./configure -g1
\endcode
from the appropriate object directory. To disable debugging, you would instead enter
\code 
> ./configure -g0
\endcode
All available optional features are discussed in more detail \ref user_options_page "here". 

Whenever a non-default feature is enabled, the simpatico build system adds a corresponding suffix to the name of all effected executables. For example, the executable file for a version of mcSim compiled with debugging enabled, but no other optional features, would be called mcSim_g, using a suffix "_g" to indicate that debugging is enabled. This is intended to make it easier to manage several different versions of each program, with different features enabled, though it does require the user to understand the association between file name suffixes and features. We recommend that you read the page \ref user_options_page before enabling optional features other than MPI (which is discussed explicitly below), and then look at the simpatico/bin directory after compiling to see the names of the resulting executable files.

\section compile_compiler_section Choosing a compiler or compiler options

By default, the build system uses the gnu compiler collection (gcc) g++ compiler. To choose a different compiler for programs that are build in a specific object directory (i.e., in obj/serial or obj/parallel), you must change the makefile variable named COMPILER in the config.mk file in the relevant object directory.This variable holds a label for a compiler. The default value, COMPILER=gcc, selects the gnu compiler. The default version of the file src/config.mk also contains settings for the intel compiler, which may be selected by setting COMPILER=intel.

The -c option of the configure script may be used to reset the value of the COMPILER string. This option takes the desired value of the COMPILER string as an argument. To choose the intel compiler for both serial and parallel programs, rather than gcc, one would thus enter:\code
> ./configure -c intel
\endcode
once in each build directory (i.e., from obj/serial and obj/parallel) before compiling.

Other required changes to compiler options or to paths for libraries and header files can be modified by manually editing the config.mk file in each obj directory. Users may edit the file config.mk as needed, but should avoid editing files named config.mk_r, which are default repository versions of corresponding config.mk files. 

\section compile_mpi_section Enable MPI

The ddSim program and the multi-processor versions of mcSim and mdSim all require an MPI library for interprocessor communication. MPI is enabled in a specific object directory when the variable UTIL_MPI is defined in the config.mk file in that directory. Before attempting to compile these multi-processor programs, users should inspect the makefile variables in the file obj/parallel/config.mk that specify the options that will be passed to the compiler when UTIL_MPI is defined. 

The variable MPI_LIB in each src/config.mk file is an identifier that can be used to choose from among different sets of compiler settings that correspond to different MPI library implementations. The values of the variables COMPILER and MPI_LIB thus select a block of compiler options appropriate for a specific combination of compiler and MPI implementation. 

The default value of MPI_LIB for both the gcc and intel compiler is MPI_LIB=mpicxx. This value selects settings designed for use with systems that use linux kernel modules to manage a users environment, and in which the C++ compiler is invoked indirectly via a wrapper script named "mpicxx". The modules system allows a user to select a compiler and mpi library loading appropriate modules before compiling any code. The wrapper script "mpicxx" then invokes the selected combination of compiler and mpi library. This system is used on all of the machines of the University of Minnesota Supercomputing Institute that were used for development.  When using modules, one must make sure that the choice of compiler in the config.mk file is consistent with that chosen by loading linux modules.

Setting COMPILER=gcc and MPI_LIB=openmpi instead selects a set of compiler options that we used to compile simpatico on a multi-core Mac laptop, using a copy of the <a http://www.open-mpi.org>openmpi</a> library that was compiled from source. 

If you are using a system that does not use modules, and the settings provided for gcc with openmpi do not work, you may have to edit the CXXFLAGS and/or LDFLAGS variables to reflect the locations of the header and library files for the MPI library on your machine. If you have not compiled an MPI program on a particular machine, you may need to either do a bit of searching to identify the appropriate paths or ask for help from a local guru.

During compilation, the definition of the variable UTIL_MPI that enables MPI is uncommented automatically by the ddMd and mcmd-mpi makefile targets that compile programs that require MPI. Users should thus not need to set it explicitly.

\section compile_ddMd_section Compile ddSim

To compile the ddSim parallel MD program, after checking the compiler settings and paths for MPI (as discussed above), simply enter 
\code
> make ddMd
\endcode
from the simpatico root directory.  If successful, the command "make ddMd" will place MPI-enabled versions of object files in the simpatico/obj/parallel directory, and install an executable named ddSim in the simpatico/bin directory. 

To clean up object (*.o),  dependency (*.d), and library files created by building ddSim, cd to obj/parallel, and enter "make clean". This does not remove the executable file.

\section compile_multi_section Compile mcSim and mdSim (multi-processor versions)
Multi-processor versions of mcSim and mdSim can be used to run:

  - Multiple completely independent simulations as an MPI job, with separate parameter files

  - Multiple simulations with a sequence of parameter values specified in a single parameter file

  - Replica exchange simulations

To compile multi-processor versions of mcSim and mdSim, if automatic dependency generation is enabled (the default), simply enter:
\code
> make mcMd-mpi
\endcode
from the simpatico root directory.  This should place executable files named mcSim_m and mdSim_m in the simpatico/bin directory. The suffix "_m" on these executable names is used to distinguish multi-processor and the single processor versions of mcSim and mdSim.
 
\section compile_doc_section Generating html documentation
The html documentation you are reading was generated using the <a href=http://www.doxygen.org> doxygen </a> documentation utility. Neither the git repository nor the downoadable version of the source codecontain a copy of the html documentation files. If desired, you may use doxygen to generate a local copy of the web documentation.  If dOxygen is installed on your machine, you can regenerate all of the html documentation by entering 
\code
> make html 
\endcode
from the simpatico root directory. The resulting html documentation is deposited in the doc/html/ directory. 

To begin reading the main page of the documentation, open the file simpatico/doc/html/index.html in any web browser, e.g., by entering "firefox doc/html/index.html" on linux or "open doc/html/index.html" on a Mac.

The text of the page you are reading now, along with others that are not extracted from C++ files, is in a set of files in the doc/dox directory. These are written in plain text, and can also be read with any text editor.  Documentation for each C++ class is extracted by doxygen from documentation blocks in the class header file. 

To remove all the html documentation in the doc/html directory, enter
\code
> make clean-html
\endcode
from the root directory.

\section compile_dependency_section Automatic dependency generation

When automatic dependency generation is enabled (the default), the build system generates a "dependency" file, with a suffix *.d, whenever it compiles *.cpp source file. 

Automatic dependency generation may be disabled entering "./configure -k0" from the root directory. Automatic dependency generation is not strictly necessary for users who want to compile the code as is, without modifying or adding any C++ files. It is essential, however, for developers, because it allows the build system to keep track of what files do or do not need to be recompiled when any file is modified. 

If dependency generation is disabled, the only safe way to recompile the code after changing any C++ file or makefile is to do a clean rebuild, by entering "make clean" from the root directory or the relevant build directory before recompiling.

The system for automatic dependency generation uses both the g++ compiler (which does actual analysis of dependencies) and several python scripts. To function, the system requires:
 
  - A g++ compiler (or a link with this name)

  - A python interpreter

  - The simpatico/tools/python/ directory must be in the PYTHONPATH environment variable

  - The makefile variable MAKEDEP must be defined in the relevant src/config.mk file

Note that the g++ compiler is used for dependency analysis even if another compiler (e.g., the intel C++ compiler) is used to actually compile the code.

<BR>
\ref user_page   (Up) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref user_usage_page (Next) 

*/
