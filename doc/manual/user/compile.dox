/*! \page user_compile_page 2.1 Compiling 

\ref user_usage_page (Next) 
<BR>

Simpatico is distributed only as source code, and must be compiled by the user. All source code is written in ANSI standard C++. By default, all code follows the ANSI 1998 C++98 standard, though it is possible to compile a version that uses a few features from C+11. The package has been developed and tested using the gcc and intel compilers in a linux environment, and with the gcc compiler in Mac OS X.  It should compile with any modern, standard compliant C++ compiler.   

The single-processor programs mcSim and mdSim have no external dependencies.  A Message Passing Interface (MPI) library is required to compile the ddSim parallel MD program. An MPI library is also required to build multiprocessor versions of mcSim and mdSim, for parallel simulations in which different systems run on different processors. 

The build system uses unix makefiles. It was developed using the gnu version of make (gmake), which is the default on all modern linux distributions and on the Max OS. 

\section compile_getcode_section Getting the source code

The source code for simpatico is hosted on <a href=http://github.com>github</a>, as project dmorse/simpatico.  The source files may be obtained either by downloading a tar file from the (very simple) <a href=http://dmorse.github.com/simpatico/index.html>home page</a> or by using a git client to clone the public <a href=https://github.com/dmorse/simpatico>git repository</a>. 

We recommend using a git client to obtain a working copy of the source code, since this makes it easy to update the code. To do so, first check whether the "git" executable is installed on your machine, by entering "which git", and install it if necessary. 

To clone the git repository using the read-only "git" communication protoocal, cd to the parent directory you wish to contain the simpatico root directory, and enter:
\code
> git clone git://github.com/dmorse/simpatico.git
\endcode
This will create a working copy of the source code in a new subdirectory named "simpatico". 

Developers: Users that want to be able to contribute to the project or share their additions to the code should create a user account on github, create a user fork of simpatico on their github account, and use a communication protocol that allows read-write access, such as ssh, to clone their own fork of github.

If you instead download a compressed tar file from the home page, move the tar file to the directory that should contain the simpatico root directory, and then enter "tar -xvf filename" from this directory, where "filename" denotes the name of the gzipped tar file. This will create a subdirectory with a name of the form dmorse-simpatico-ID/, where "ID" represents a hexadecimal identifier for the most recent commit in the git repository. We recommend that you immediately rename this directory "simpatico/", which is the name it is given when you clone the repository.

Throughout this documentation, we assume that the root project directory is named simpatico/.  References to paths that do not start explicitly with a prefix "simpatico/" should be understood to be relative paths, relative to this directory. The directory structure is explained \ref source_directory_page "here".

\section compile_short_section Short instructions

Here is a brief summary of instructions for compiling all of the simpatico programs:

   - Add simpatico/bin to the users PATH, and add simpatico/scripts/python to PYTHONPATH (as discussed \ref compile_environment_section "here").

   - cd simpatico/ (i.e., cd to the simpatico root directory)

   - ./setup

   - make mcMd

   - Check MPI settings in build/parallel/config.mk

   - make ddMd

   - make mcMd-mpi 

The setup script and all three main make commands must be executed from the simpatico root directory. The command "make mcMd" builds the single-processor programs mcSim and mdSim. The command "make ddMd" builds the parallel molecular dynamics program ddSim. The command "make mcMd-mpi" builds multi-processor versions of mcSim and mdSim.

Each of the above steps is discussed in more detail below. 

\section compile_environment_section Setting environment variables

Before compiling any code, you should:

  - Add simpatico/bin to the PATH shell environment variable (the shell command search path)

  - Add simpatico/scripts/python to the PYTHONPATH environment variable (the python module search path)

To do this, you must add some variant of the following lines to your the .profile or .bash_profile file in your user home directory:
\code
SIMPATICO_DIR=${HOME}/simpatico
export PATH=${PATH}:/${SIMPATICO_DIR}/bin
export PYTHONPATH=${PYTHONPATH}:/${SIMPATICO_DIR}/scripts/python
\endcode
The value of SIMPATICO_DIR should be set to the path to the simpatico root directory. In the above example, this is assumed to be a subdirectory of the users home directory. After adding an appropriate variant of these lines to .profile or .bash_profile, log out, log back in, and then enter "echo $PATH" and "echo $PYTHONPATH" to make sure that these variables have been set correctly. 

Explanation: The simpatico/bin directory is the default location for installing executable files created by the build system. This must be added to the users PATH to allow the operating system to find the executable files needed to run a simulation. The simpatico/scripts/python directory contains a python script that is used by the build system to generate information about dependencies among C++ files, as discussed in more detail \ref compile_dependency_section "below".

\section compile_setup_section Setup script

Before compiling any code, you must run a bash script named "setup". This script is located in the simpatico/ root directory, and must be executed from within this directory. Thus, starting from the directory that contain the simpatico/ root directory, you would enter:
\code
> cd simpatico
> ./setup
\endcode
Explanation: The setup script creates initial user versions of several configuration files that are required for compilation, but that are not kept in the repository. These are all files that users may need to modify in order to customize or extend the program. The setup script should only need to be invoked once, before the first time you compile.

\section compile_build_directories_section Build directories

The simpatico makefile system can build the code either "out-of-source" or "in-source" builds, depending on which directory the "make" command is invoked from. When a program is built "in-source", files that are generated by compiling individual source files are placed alongside the corresponding source files, in the src/ directory tree. When it is built "out-of-source", these files are placed in a separate "build" directory tree, outside the source tree. In either case, however, the executable files for all programs are installed in the simpatico/bin directory.

When "make" is invoked from the simpatico/ root directory, as described in the above short instructions, all programs are built out of source, using different build directories for serial and parallel (mpi-enabled) programs. In this case, the serial mcSim and mdSim programs, which do not use MPI, are built in the simpatico/bld/serial/ directory. The ddSim parallel MD program, and the multi-processor versions of mcSim and mdSim, are instead built in the simpatico/bld/parallel directory.

To execute an in-source build, one must invoke make from the simpatico/src directory, rather than from the simpatico/ root directory. The same commands are used as those used to build out-of-source from the root directory: Invoking "make mcMd" from the src/ directory executes an in-source build of mcSim and mdSim. Invoking "make ddMd" from src/ builds ddSim. Invoking "make mcMd-mpi" builds multi-processor versions of "mcSim" and "mdSim".

We recommend that most users execute out-of-source builds, by executing make from the root directory, as described above. In-source builds are convenient for developers during development of a new class. In the remainder of this page, we assume that make will be executed from the simpatico/ root directory.

In what follows, we refer to bld/serial, bld/parallel, and src/ collectively as build directories. Each build directory contains a tree of subdirectories identical to that of the src/ directory. After the setup script is run, each of the three build directories will contain a set of build configuration files. The main build configuration file is a file named config.mk in the root directory of each build directory tree (i.e., in bld/serial, bld/parallel, or src/). In addition, the util/, inter/, mcMd/ and ddMd/, and tools/ subdirectories of each build directory tree also contains a namespace level configuration file, which is also named config.mk. The six config.mk files in each build directory are makefile fragments that are included by other makefiles, which together specify choices of compiler options and optional features that will be applied to any program that is built in that build directory.

The src/ directory also contains a corresponding set of files named config.mk_r. Each of these is a default repository version of a corresponding config.mk files. Only the config.mk_r files are kept under version control in the git repository. (The suffix _r stands for "repository"). The setup script creates each config.mk file by copying the corresponding config.mk_r file and (in some cases) editing a few lines. Users may then edit the config.mk build configuration files as needed to configure the program, but should avoid modifying the config.mk_r default versions. The default configuration can then always be recovered, if necessary, by re-running the setup script.

\section compile_mcMd_section Compiling mcSim and mdSim

As a first step, try compiling the single-processor versions of the mcSim and mdSim programs. Because these programs have no external dependencies, they usually compile with no difficulties. To compile default versions of these programs using the default gcc compiler, after running the setup script (see above), simply cd to the simpatico/ root directory and then enter:
\code
> make mcMd
\endcode
This will compile a large number of *.cpp files from the simpatico/src/ directory, placing corresponding object (*.o) and dependency (*.d) files in the simpatico/bld/serial directory, and then install executable files named mcSim and mdSim in the simpatico/bin directory. 

\section compile_compiler_section Choosing a compiler and compiler options

The choice of what compiler command to use, and what options to pass the compiler, are specified in the main config.mk file in each build directory. By default, the build system uses the gnu compiler collection (gcc) g++ compiler, using a reasonable set of default compiler options. To choose a different compiler or compiler options for programs that are built in a specific build directory, users may have to edit the main config.mk file in that directory.

The choice of compiler is specified by the value of a makefile variable named COMPILER in the main config.mk in each build directory. Thus far, the only valid values are "gcc" or "intel". The default value, COMPILER=gcc, selects the gnu C++ compiler, for which the compiler command name is "g++". Setting COMPILER=intel selects the intel C++ compiler, for which the command is "icpc".

Setting the value for the COMPILER variable causes the config.mk makefile fragment to execute a block of definitions of other variables that define options that should be passed to the compiler. To change the options passed to a particular compiler, one must edit the values assigned to a set of other makefile variables in the main config.mk file. Users who wish to do this should read the documentation in config.mk file, which explains the purpose of each of the relevant makefile variables. Users may also edit this file so as to allow use of compilers other than the gcc and intel compilers.

\section compile_mpi_section Choosing an MPI library

The ddSim program and the multi-processor versions of mcSim and mdSim all require an MPI library for interprocessor communication.  The main config.mk file in each build directory contains a makefile variable named MPI_LIB. The value of MPI_LIB is a string that identifies a specific MPI library implementation that should be used by programs that required MPI. The values of the variables COMPILER and MPI_LIB select a block of makefile variable definitions will be used for a specific combination of compiler and MPI library. 

The default value of MPI_LIB is MPI_LIB=mpicxx. This choice selects settings designed for use with systems that use the "mpicxx" script to simplify the process of compiling and linking MPI programs. The "mpicxx" command is a wrapper script that invokes a default choice of compiler and mpi library with appropriate compiler options. It is often used together with the linux <a http://www.open-mpi.org>environment modules</a> to manage the user's environment. On systems that use linux environment modules, each user must use the "module load" command to select default choices for the compiler and mpi library before attempting to compile or run any code. After loading the appropriate modules, the "mpicxx" script will then invoke the selected compiler command with options that specify appropriate paths for the selected mpi library module. This module system is used on all of the machines of the University of Minnesota Supercomputing Institute that were used for development. When using modules, the user is responsible for making sure that the choice of compiler and compiler options specified in each simpatico config.mk configuration file is consistent with the choices of compiler and MPI library that are chosen by loading appropriate linux modules.

Setting COMPILER=gcc and MPI_LIB=openmpi selects a set of compiler options that we have used to compile simpatico on a multi-core Mac laptop, using a copy of the <a http://www.open-mpi.org>openmpi</a> library that was compiled from source using the gcc compiler. 

If you are using a system that does not use environment modules, and the settings provided for gcc with openmpi do not work, you may have to edit the INCLUDES and/or LDFLAGS variables to reflect the paths for the header and/or library files for an MPI library on your machine. If you have never compiled an MPI program on a particular machine, you may need to either do a bit of searching to identify the appropriate paths, or ask for help from a local guru.

If make is invoked from the simpatico/ root directory, however, MPI will be automatically enabled in the bld/parallel directory and disabled in the bld/serial directory before attempting to compile any code. When make is invoked from the simpatico/ root directory (as we recommend), there is thus no need for users to manually edit configuration files to enable or disable MPI in different build directories.

When make is invoked from the src/ directory in order to execute an in-source build, however, users are responsible for disabling MPI before compiling serial programs (serial versions of mcSim and mdSim) and enabling MPI before compiling parallel programs (ddSim and parallel versions of mcSim and mdSim). The use of MPI in a particular build directory is enabled if the main config.mk file in the build directory contains a line that defines "UTIL_MPI=1", and is disabled when this line of the config.mk file is commented out. The simplest way to enable or disable is to use the configure script with the "-m" option, by entering "./configure -m0" from the src/ directory to enable MPI, or "./configure -m1" to disable MPI. The configure script is discussed in more detail below. 

\section compile_ddMd_section Compiling ddSim

To compile the ddSim parallel MD program, after choosing a compiler and MPI library (as discussed above), enter
\code
> make ddMd
\endcode
from the root directory.  If successful, this will create an executable named ddSim in the simpatico/bin directory. 

\section compile_multi_section Compiling mcSim and mdSim (multi-processor versions)

Multi-processor versions of mcSim and mdSim can be used to run:

  - Multiple independent single-processor simulations as an MPI job, with completely separate input and output files

  - Multiple simulations with a sequence of parameter values specified in a single parameter file

  - Replica exchange simulations

To compile multi-processor versions of mcSim and mdSim, enter:
\code
> make mcMd-mpi
\endcode
from the simpatico/ root directory.  This should create executable files named mcSim_m and mdSim_m in the simpatico/bin/ directory. The suffix "_m" on these executable names denotes "MPI", and is used to distinguish multi-processor versions of the mcSim and mdSim executables from single processor versions.
 
\section compile_configure_section The configure script

Each build directory (i.e., bld/serial, bld/parallel, and src/) also contains a copy of a bash script named "configure" that can be invoked before compilation to specify which optional features should be enabled or disabled in any program that is built in that directory. The configure script changes settings by programmatically editing the config.mk configuration files. The configure script must be invoked from the root of a build directory (i.e., from bld/serial, bld/parallel, and src/), and only affects programs that are built in that directory.

The -q command line option of the configure script may be used to query which optional features are currently set to be enabled or disabled. To see how this works, after the setup script has been run, cd to the bld/serial directory and enter
\code
> ./configure -q
\endcode
The -q command line option cause the script to print a list of which optional features are currently enabled, and the name of the current choice of compiler. Before modifying any default choices, the resulting output should look something like this:
\code
-m OFF - MPI
-g OFF - debugging
-b ON  - bond potential
-a OFF - angle potential
-d OFF - dihedral potential
-e OFF - external potential
-l OFF - McMd links (mutable bonds)
-s OFF - McMd shift
-u OFF - DdMd modifiers
-u OFF - DdMd molecules
-k ON  - automatic dependency tracking
COMPILER:=gcc
\endcode
Every line except the last shows whether an optional feature is currently set to be enabled (ON) or disabled (OFF). The last line gives an identifier for the current compiler (gcc, by default). The output of the configure script in the bld/parallel directory should look similiar, except that it should indicate that MPI is ON (enabled).

Each line in this output except the last begins with the name of the command line option for the configure script (a dash followed by a letter) that can be used to enable or disable an associated feature. For example, the "debugging" feature is enabled or disabled using the "-g" option. Each feature can be enabled by using the associated command line option followed by "1" (ON), or disabled by using the option followed by "0" (OFF). 

For example, to enable debugging (which enables extensive run-time sanity checks, at some cost in speed), one would enter
\code 
> ./configure -g1
\endcode
from the root of the relevant build directory. Running "./configure -q" again after this change would show that debugging is now enabled. This and any other desired changes must be made before invoking make to compile a program. To disable debugging, one would instead enter
\code 
> ./configure -g0
\endcode
and then recompile. All of the available optional features are discussed \ref user_options_page "here". 

The configure script may also be used to reset the value of the COMPILER identifier string from the command line, using the -h option. This option takes the desired value of the COMPILER string as an argument. To choose the intel compiler, rather than gcc, one could thus enter:
\code
> ./configure -h intel
\endcode
from the relevant build directory (i.e., from bld/serial and/or bld/parallel) before compiling. The same effect could be achieved by manually editing the line that defines COMPILER in the main config.mk file.

The configure script in each build directory only modifies the configuration files in the same build directory tree, and thus only effects programs built in that directory. Choices that you make by invoking the configure script from the bld/serial directory thus only affect serial programs that are built in that directory, whereas choices that you make by invoking configure from bld/parallel only affect parallel programs that are built there. Invoking configure from the src/ directory will affects the configuration of any serial or parallel program that is built in-source.

\section compile_suffix_section Executable File Name Suffixes

Users may want to maintain several versions of a program with different features enabled or disabled. To make this possible, the simpatico build system uses a system of file name suffixes to distinguish different versions of a program. Whenever a feature that is disabled by default is enabled, the build system adds a suffix to the name of all affected executable files to indicate the change. For example, the executable file for a version of mcSim that was compiled with debugging enabled, but no other non-default features, would be called mcSim_g. The suffix "_g" is used indicate that debugging is enabled in that executable. The same convention is used in the names "mcSim_m" and "mdSim_m" of the multi-processor versions of mcSim and mdSim, in which the suffix "_m" is used to indicate that these programs were compiled with MPI enabled. In most cases, the file name suffix associated with an optional feature is a underscore followed by a single letter that is the same as the letter in the command line option of the configure script that is used to enable or disable that feature. 

The use of this convention requires users to understand the relationship between features and file name suffixes in order to invoke the correct executable name when running a simulation. For example, a user needs to know to invoke "mdSim_g" to run a version of mdSim with debugging enabled (which can be helpful during development) but to invoke "mdSim" to run the faster "production" version. We recommend that users read page \ref user_options_page before compiling programs with any non-default features enabled. We also recommend that users get in the habit of listing the contents of the simpatico/bin directory before and after building programs with non-default features enabled, to make sure they know the names of the executable files that they have created, and so can invoke them correctly to run simulations.

\section compile_doc_section Generating html documentation

The html documentation you are reading was generated using the <a href=http://www.doxygen.org> doxygen </a> documentation utility. Neither the git repository nor the downloadable version of the source code contain the resulting html files. If doxygen is installed on your machine, you can regenerate a local copy of the html documentation by entering
\code
> make html 
\endcode
from the root directory. The resulting html files will be installed in the simpatico/doc/html/ directory. 

The main page of the html documentation is a file named doc/html/index.html. To begin reading the documentation, open this file in any web browser, e.g., by entering 
\code
> firefox doc/html/index.html
\endcode
from the simpatico/ directory to use the firefox browser on linux, or entering
\code
> open doc/html/index.html
\endcode 
to use the default browser on a Mac.

The text of the page you are now reading, along with other main manual pages, is contained in a set of files with file extension *.dox in the doc/manual directory. These are written in plain text, and can also be read with any text editor. Additional API documentation for each C++ class is extracted by doxygen from documentation blocks in the class header file. 

To delete all html documentation from the doc/html directory, enter
\code
> make clean-html
\endcode
from the simpatico/ root directory.

\section compile_dependency_section Automatic dependency generation

By default, the simpatico build system automatically generates a "dependency" file, with a suffix *.d, whenever it compiles a *.cpp source file. The dependency file is placed in the build directory tree in same directory as the corresponding object *.o file. 

The system for generating dependency files uses the g++ compiler, which does the actual analysis of dependencies among C++ files, and a python script named simpatico/scripts/python/makeDepend.py. To function, the system requires that:
 
  - A g++ compiler (or a link with this name) must be in the user's PATH environment variable

  - A python interpreter must be in the user's PATH

  - The simpatico/scripts/python/ directory must be in the PYTHONPATH environment variable

Note that the g++ compiler is used for dependency analysis even if another compiler (e.g., the intel compiler) is used for compilation. A g++ compiler and python interpreter is normally available on any modern linux distribution and any Mac OS X environment that is correctly set up for C++ development.

Automatic generation of dependency files is an essential feature for developers - It makes it possible to safely rebuild a program after you modify one or two files, and have the build system recompile only what needs to be recompiled. This feature is not, however, strictly necessary for users who simply want to compile one version of the code and use it as is, without modifying any C++ files.  It is possible to disable automatic dependency generation in any build directory by entering "./configure -k0" from the root of that build directory. The only good reason to do so is as a temporary measure if you run into trouble that you suspect arises from a problem in the dependency generation system, e.g., if compilation fails because the operating system cannot find a python interpeter or if python cannot find the makeDepend.py python script. If the PATH and PYTHONPATH are set correctly, however, this should not be necessary.

<BR>
\ref user_page   (Up) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref user_usage_page (Next) 

*/
