/*! \page user_compile_setup_page 2.3.2 Initial setup

\ref user_compile_overview_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref user_compile_configure_page (Next) 
<BR>

This page describes the two initial steps that must be carried out
before compiling any simpatico source code. These are:

  - Setting unix shell environment variables

  - Running the "setup" shell script

\section compile_environment_section Setting environment variables

In a unix environment, before compiling any code, you must modify the following 
unix environment variables:

  - Add the simpatico simpatico/bin directory to the unix PATH shell 
    environment variable (the shell command search path)

  - Add the simpatico/scripts/python directory to the PYTHONPATH 
    environment variable (the python module search path)

To do this, if you are using a bash shell, you add some variant of the following lines to your the .profile or .bash_profile file in your user home directory:
\code
SIMPATICO_DIR=${HOME}/simpatico
export PATH=${PATH}:/${SIMPATICO_DIR}/bin
export PYTHONPATH=${PYTHONPATH}:/${SIMPATICO_DIR}/scripts/python
\endcode
The value of SIMPATICO_DIR should be set to the path to the simpatico root directory. 
In the above fragment, as an example, it is assumed that the simpatico/ directory is a subdirectory of the users home directory. 

After adding an appropriate variant of these lines to .profile or .bash_profile, log out, log back in, and then enter "echo $PATH" and "echo $PYTHONPATH" to make sure that these variables have been set correctly. 
Rationale: The simpatico/bin directory is the default location for installing executable files created by the build system. This must be added to the users PATH to allow the operating system to find the executable files needed to run a simulation. The simpatico/scripts/python directory contains a python script that is used by the build system during compilation to generate information about dependencies among C++ files, as discussed in more detail \ref compile_dependency_section "here".

\section compile_setup_section Setup Script

Before compiling any code, you must also run a bash script named "setup". This script is located in the simpatico/ root directory, and must be executed from this directory.  The setup script installs default versions of a variety of files that users may need to modify in order configure or extend the progam, and that are thus not stored in the repository.  It is only necessary to invoke the setup script once, before the first time you compile. 

To create configuration files appropriate for a generic unix-like environment, in which it is assumed that you wil compile using the g++ compiler command, you may enter:
\code
> ./setup
\endcode
from the simpatico/ root repository. 
Note the dot and backslash ("./") before the name of the script. 
These must be included to tell the unix shell to look for a script named setup in the current working directory, rather than searching the directories listed in the PATH environment variable.

To create a more specialized configuration, the setup script may also be invoked with a single argument that gives the name of a file containing definitions of variables appropriate to a particular choice of compiler and computing environment. 
The required files are located in the directory "simpatico/src/make/compiler". 
This directory contains several files with names such as "gcc" and "intel" that provide variable definitions appropriate, e.g., the gcc and intel compilers. 
When the setup command is invoked with no argument, as described above, it uses the "gcc" file by default. 
Invoking the command
\code
\> ./setup intel
\endcode
would instead create configuration files with settings appropriate to an intel compiler. 
To further specialize settings that are defined in these files, a user may also add a file to the "simpatico/src/make/compiler" that contains setting appropriate to his or her environment, and then invoke the setup script with the name of that new file as an argument. 

<BR>
\ref user_compile_overview_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref user_compile_page   (Up) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref user_compile_configure_page (Prev) 

*/
