/*! \page developer_iterator_page 7.4 Loops and Iterators 

Most loops in Simpatico are written using iterators, rather than simple for-loops.

\section iterator_iterator_section Iterator Types
The directory src/util/containers contains several class templates for forward iterators. Each iterator type allows iteration over the elements of a corresponding container type. The iterator and container interfaces are slightly different from those of C++ standard library iterators.  All iterators overload *, ->, and (prefix) ++ operators.  The meaning of these operators is identical to that for bare C pointers or C++ standard library iterators. The syntax for accessing an object via an iterator, or incrementing the iterator, is thus identical to that for a pointer. Unlike pointers or standard library iterators, however, each Simpatico iterator also provides a notEnd() method that can be used to test for termination of a loop, so that a single iterator (rather than a pair) can be used to implement a loop.

If ``iter" is the name of a simpatico iterator that points to an object A of type T within a container, then
<ul>
    <li> *iter returns the object A by reference </li>
    <li> iter->member returns the member A->member.
    <li> ++iter incrementis iter to the next item in the container. </li>
    <li> iter.notEnd() returns false when the loop should terminate.
</ul>

Each of the simaptico container templates provides a method begin(Iterator& ) that takes the relevant type of iterator as an argument, and that initializes the iterator to the first element in the container.  The standard form of a for-loop that iterates over elements of a container is thus:
\code
   Iterator iter;
   for (container.begin(iter); iter.notEnd(); ++i){

      // Do something with iter, using the iterator like a pointer.

   }
\endcode

There are actually two types of Iterator template associated with each type of container template: A non-const forward iterator, which provides read-write (non-const) access to each element, and a const forward iterator which provides read-only (const) access. The name of the const iterator always begins with the prefix Const. For example Util::ArrayIterator<T> and Util::ConstArrayIterator<T> are the non-const and const iterator types for instances of DArray<T>, FArray<T>, and SArray<T> array containers, where T denotes the element type. 

Loops over atoms and (in McMd) molecules are also implemented using iterators. The typesnames for the relevant iterator types are given in both the McMd and DdMd namespaces by typedefs that are members of the class that acts as a container for atoms or molecules. The McMd namespace (for mcSim and mdSim) and DdMd namespace (for ddSim) use different types of containers, which are discussed separately below.

\section developer_iterator_mcMd_section Iterators in mcSim and mdSim

In mcSim and mdSim simulations, each McMd::System has a container of molecules for each species. The typedefs McMd::System::MoleculeIterator and McMd::System::ConstMoleculeIterator are iterator types that can iterate over all molecules of a specific Species within one System. The McMd::System class provides overloaded begin() methods for these two types that each of that takes an integer species index and molecular iterator as parameters, and initialize the iterator to point at the first molecule in the specified species. The syntax for a loop over all molecule of a specific species in is thus:
\code
   System system;
   System::MoleculeIterator molIter:

   // Loop over molecules in species
   for (system.begin(speciesId, molIter); molIter.notEnd(); ++molIter){

       // Do something with molIter, using a syntax similar to that for a pointer.

   }
\endcode
Here speciesId is an integer index for a specific species. In and MC or MD simulation, the system would normally be an instance of the McSystem or MdSystem subclass, respectively, but the required functionality is provided by the McMd::System base class.

To iterate over all the atoms in an McMd::System, one must use a nested iteration over species, molecules, and atoms within each molecule.  The type for an iterator for all Atom objects within a molecules is given by the typedef Molecule::AtomIterator(). The McMd::Molecule class provides a begin() method that initializes a Molecule::AtomIterator. The syntax for a loop over all atoms of all molecules of all species in a System is thus:
\code
namespace McMd
{
 
   System system;
   Simulation simulation;
   System::MoleculeIterator molIter:
   Molecule::AtomIterator atomIter:

   // Loop over all molecular species
   int nSpecies = Simulation::nSpecies();
   for (int iSpecies = 0; iSpecies < nSpecies; ++iSpecies) {

      // Loop over molecules in each species
      for (system.begin(species, molIter); !molIter.atEnd(); ++i){

         // Loop over atoms in each molecule
         for (molItr->begin(species, atomIter); !atomIter.atEnd(); ++atomIter){

            // Do something with each atom, using atomIter as if it were a pointer.

         }

      }

   }

}
\endcode


\section developer_iterator_ddMd_section Iterators in ddSim

In ddSim simulations, the AtomStorage member of the main DdMd::Simulation acts as a container for all of the DdMd::Atom objects owned by a processor. The typedefs DdMd::AtomIterator and DdMd::ConstAtomIterator are types for non-const and const iterators that can iterate over all of the atoms owned by a processor. Their is no notion of a molecule or molecular species in the DdMd namespace: In this context, one must iterates directly over DdMd::Atom objects owned by an AtomStorage. The types DdMd::GhostIterator and DdMd::ConstGhostIterator instead iterate over all of the ghost atoms on a processor. Ghost atoms are atoms that are owned by a neighboring processor, but that are close enough to the boundary to potentially interact with atoms owned by this processor. 

The DdMd::AtomStorage class provides an overloaded begin(Iterator& ) method for each of these four types of iterators. Which type of atom is iterated over is determined by the type of the iterator that is passed to the begin() method. The syntax for a loop that provides read-write access to all of the ``local" atoms on a processor (i.e., all of those owned by this processor) is simply
\code
namespace DdMd
{

   AtomStorage  atomStorage;
   AtomIterator atomIter:
   for (atomStorage.begin(atomIter); atomIter.notEnd(); ++atomIter){
      // Do something with atomIter
   }

}
\endcode
A corresponding loop over ghost atoms would simply use a AtomStorage::GhostIterator type for the iterator.

Instances of the DdMd::GroupStorage<N> template with N=2, 3 or 4 are containers for bond, angle and dihedral covalent Group<N> objects, respectively. Each Group<N> holds pointers to several DdMd::Atom objects, which may be either a local or ghost atoms, though each group mustcontain at least one local atom. The typedefs DdMd::GroupIterator<N> and DdMd::ConstGroupIterator<N> are types for iterators that iterate over all the Group<N> objects in a GroupStorage<N> container. The syntax for iterating is similar to that for other Simpatico iterators. Here is ans example for a loop over covalent bonds (N=2):
\code
namespace DdMd
{

   GroupStorage<2>  bondStorage;
   GroupIterator<2> bondIter:
   for (bondStorage.begin(bondIter); bondIter.notEnd(); ++bondIter){
      // Do something with bondIter
   }

}
\endcode
This could also be written using the typedefs BondStorage and BondIterator, which are simply aliases for GroupStorage<2> and GroupIterator<2>, respectively. A corresponding loop over angles or dihedrals would be similar except for the use of a template argument N = 3 or N = 4, respectively, or equivalent Angle or Dihedral typedefs (e.g., AngleStorage and AngleIterator).

Navigation:
<ul style="list-style: none;">
 <li> \ref developer_param_page     (Previous)  </li>
 <li> \ref developer_page           (Up)        </li>
 <li> \ref developer_mcMdData_page  (Next)  </li>
</ul>

*/
