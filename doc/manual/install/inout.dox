/*! \page install_inout_page 2.6 Compiling In-source vs. Out-of-source

\ref install_setup_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref install_compile_out_page (Next) 
<BR>

When the simpatico makefile system compiles any program in the package, it 
generates a set of intermediate files before constructing the final executable
file. These intermediate generated files include object files generated by
compiling individual source files (extension *.o), dependency files that 
list the included header files and other files upon which each source file
depends (extension *.d), and static libraries (extension *.a). The directory
in which these intermediate files are placed will be referred to as the
"build" directory used during compilation. This build directory can either
be the same as the src/ directory (an "in-source" build) or a separate 
directory that is used only for this purpose (an "out-of-source") build.

The simpatico makefile system allows the user to compile either "in-source" 
or "out-of-source". When code is compiled "in-source" intermediate files
that are generated during compilation are placed in the src/ directory 
tree, alongside the corresponding C++ source files. When code is compiled 
out-of-source", these intermediate files are instead placed in a separate 
build directory tree.  By default, during an out-of-source build, serial 
programs are built in the simpatico/bld/serial directory and parallel MPI 
programs are built in the simpatico/bld/parallel directory. In all cases,
however, all executable files for all programs are installed in the 
simpatico/bin directory by default. 

We recommend that most users build simpatico out of source. The overview
of instructions given in a \ref install_overview_page "previous page" were
actually instructions for performing an out-of-source build. Subsequent 
pages give more detailed instructions for compiling either 
\ref install_compile_out_page "out-of-source" or 
\ref install_compile_in_page "in-source". A brief overview of the main 
differences is given below.

\section install_inout_out_section Compiling Out-of-source
To perform a standard out-of-source build of any simpatico program, one 
invokes "make" with an appropriate target (e.g., "make mcMd" or "make ddMd")
from the simpatico/ root directory, as described in the preceding 
\ref install_overview_page "overview".  That is, for example, to compile 
and install the mcSim and mdSim programs, one invokes "make mcMd" from 
the simpatico/ root directory.  This uses the makefile in the root 
simpatico/ directory, which automatically builds out-of-source and uses 
different build directories for serial (single-processor) and parallel 
(mpi-enabled) programs.  Specifically, the serial mcSim, mdSim, and mdPp 
programs are built in the simpatico/bld/serial/ directory, whereas the 
ddSim parallel MD program and the multi-processor versions of mcSim and 
mdSim are built in the simpatico/bld/parallel directory.  

\section install_inout_in_section Compiling In-source
The ability to perform an in-source build is provided as a convenience for 
developers, for whom it is sometimes convenient to able to compile a file
or set files from within the directory containing the relevant source 
files. To peform an in-source build of any program, one may simply invoke
"make" with an appropriate target from the simpatico/src/ directory, 
rather than from the simpatico/ root directory.  For example, invoking 
"make mcMd" from the src/ directory performs an in-source build of mcSim 
and mdSim, and invoking "make ddMd" from src/ performs an in-source build 
of ddSim. The make utility can also be invoked from any subdirectory of the src/ directory in order to compile only recently modified files in that 
subdirectory, as discussed in more detail \ref install_compile_in_page "here".

\section install_inout_directories_section Build Directories

The src/, build/serial, and build/parallel directories are referred to in
what follows as standard "build" directories. These three directories have
nearly identical subdirectory structures, which mimics the directory
structure used to organize source code files in the src/ directory. After 
the setup script has been run, each of these three directories will contain
a similar set of makefiles and makefile fragments. These are files that
have names "makefile", "config.mk" or "patterns.mk". (The extension *.mk
indicates a makefile fragment that is included in other makefiles).
he makefiles and makefile fragments in each build directory control the 
options passed to the compiler for code built in that directory, and have
no effect on code built in another directory. 

Files in the build directory named "config.mk" are referred to in what
follows as configuration files. Each configuration file contains a set
of definitions of makefile variables that are used to specify the
command line options that will be passed to the compiler and linkers 
during compilation. Some of these variables control conditional
compilation of blocks of code that implement particular optional
features, thus controlling whether these features will be enabled
in the resulting executable. 

The root simpatico/ directory and each of the three standard build 
directories also contains a bash script named "configure" that can 
be invoked to programmatically edit configuration files so as enable 
or disable particular optional features of the code prior to 
compilation. This use of the configure scripts is discussed in more 
detail \ref install_configure_page "here". 

<BR>
\ref install_setup_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref install_page   (Up) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref install_compile_out_page (Next) 
*/
