/*! \page install_configure_page 2.5 Configuring simpatico

\ref install_setup_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref install_compile_out_page (Next) 
<BR>

Compilation and installation of simpatico is controlled by a system of unix
makefiles. Some of these files, which we will refer to as configuration files,
define makefile variables whose values control the options that are passed to 
the compiler when the code is compiled. Among these are variables that control 
conditional compilation of some optional features of the source code, thus
controlling which features will be enabled in the resulting executable files.
Simpatico is distributed with a shell script, named "configure", that can be 
used to modify the values of some of these makefile variables, and thus 
control the configuration of the resulting executable (i.e., the choice of
which features are enabled). 

Users who would at least initially like to compile the default versions of 
all of the simpatico programs, with the features that are enabled by default, 
can skip the remainder of this page on first reading. After successfully 
compiling the default versions of the code, one can always use the configure 
script to change the configuration and recompile the code. The build systems 
is designed to automatically note changes in the configuration files, and 
will correctly choose which files need to be recompiled if the user invokes
one of the main make targets (e.g., "make mcMd" or make "ddMd") after
changing the configuration.

The remainder of this page explains the two different possible ways of
compiling simpatico ("out-of-source" vs. "in-source"), discusses some basic
information about the makefile system and configuration files, and explains 
how to use the "configure" script to control program configuration before 
compiling.

\section install_configure_inoutsource_section Building "out-of-source" vs. "in-source"

The simpatico makefile system can build the package either "out-of-source" 
or "in-source". When the package is built "in-source", object files, static 
library files and other non-executable files that are generated during 
compilation are placed in the src/ directory tree, alongside the corresponding 
C++ source files. When it is built "out-of-source", these generated files 
are placed in a separate "build" directory tree, outside the source tree. 
In either case, the executable files for all programs are installed in the 
simpatico/bin directory by default.

We recommend that most users build simpatico out of source.  The overview
of instructions for compiling the code given in a previous page 
(\ref install_overview_page "here") were instructions for performing 
an out-of-source build. 

To perform a standard out-of-source build of any simpatico program, one 
invokes "make" with an appropriate target (e.g., "make mcMd" or "make ddMd")
from the simpatico/ root directory, as described in the short instructions. 
That is, for example, to compile and install the mcSim and mdSim programs, 
one invokes "make mcMd" from the simpatico/ root directory.  The makefile 
in the root directory will automatically build out-of-source, and uses different 
build directories for serial (single-processor) and parallel (mpi-enabled) 
programs.  The serial mcSim, mdSim, and mdPp programs are built in the 
simpatico/bld/serial/ directory, whereas the ddSim parallel MD program and 
the multi-processor versions of mcSim and mdSim are built in the 
simpatico/bld/parallel directory.

The ability to perform an in-source build is provided as a convenience for 
developers.  To peform an in-source build of any program, one should simply
invoke "make" with an appropriate target from the simpatico/src/ directory, 
rather than from the simpatico/ root directory. The same commands are used 
as those used to build out-of-source from the root directory. For example,
invoking "make mcMd" from the src/ directory performs an in-source build 
of mcSim and mdSim, and invoking "make ddMd" from src/ performs an 
in-source build of ddSim. In-source builds are discussed in greater
detail \ref install_compile_in_page "here".
 
Hereafter, when not otherwise stated, we will assume that all simpatico
programs are built out-of-source, by invoking the make utility from the 
simpatico/ root directory.

\section install_configure_build_directories_section Build configuration files

The directories bld/serial, bld/parallel and src/ each contain the 
directory structure and the set of makefiles required to build any version 
of simpatico. In what follows, we will refer to these three directories 
collectively as build directories. Each of these build directories contains 
a tree of subdirectories similar to that of the src/ directory. Each
build directory contains a set of five subdirectories named util/, simp/, 
mcMd/, ddMd/, and tools/ that each contain all of the C++ source files in
a single C++ namespace. In what follows, we will refer to these five
subdirectories as "namespace-level" subdirectories of a build directory.

After setup (i.e., after the setup script has been run), each of these 
three build directories will contains several makefiles and a set of 6
build configuration files. The build configuration are all files named 
"config.mk" that are located either in the root of the build directory 
(i.e., in bld/serial, bld/parallel, or src/) or in one the 5 namespace-level 
subdirectories of the build directory (i.e., in the util/, simp/, mcMd/ 
and ddMd/, and tools/ subdirectories).  These config.mk configuration 
files are makefile fragments that are included by other makefiles 
during compilation process.

The config.mk file in the root directory of the build directory tree 
(e.g., in the src/ directory) is the main build configuration file. 
This file controls the choice of compiler and general options that are 
applied to all code.  The config.mk files in the namespace level control 
more specialized options that are only relevant for code in specific 
namespaces.  The six config.mk files in each build directory together 
specify the configuration of any code compiled in that directory. 

Users may change the configuration of code built in a particular build 
directory before compiling either by: (1) manually editing the config.mk
configuration files, or (2) by using a script named "configure" to enable 
or disable specific features. We recommend using the configure script 
(discussed in more detail \ref install_configure_script_section "below") 
to change configuration whenever possible, but some changes require manual 
editing.

The namespace level subirectories of the src/ directory also each contain
a file named config.mk_r. Each of these is a default version of the 
corresponding config.mk file. Only the files named "config.mk_r" are stored 
in the git source-code repository.  (The suffix _r stands for "repository".) 
The setup script creates a default version of each config.mk file by simply
making copies of the corresponding config.mk_r file.  

\section install_configure_script_section The configure script

Each build directory (i.e., bld/serial, bld/parallel, and src/) contains 
a bash script named "configure" that can be used enabled or disable 
specific compile time features. There is also an analogous script in the
simpatico/ root directory which can be used to apply the same set of 
changes simultaneously to configuration files in the bld/serial and 
bld/parallel directories.

The configure script in each build directory does its work by editing the 
build configuration files, which control what options will be passed to 
the compiler during any subsequent compilation. The configure script in 
each build directory must be invoked from the directory that contains 
the script (i.e., from bld/serial, bld/parallel, and src/), and only 
affects the configuration of code that is compiled in that build directory.

The configure script in the root simpatico/ directory works by invoking
the configure scripts in the bld/parallel and bld/serial with the same
options, thus applying the same changes to configuration files in both 
of these directories.

\subsection install_configure_script_query_sub The "query" option

The -q command line option of a configure script may be used to query 
which optional features are currently set to be enabled or disabled, and
the current values of variables that specify the choice of compiler and
environment. To see how this works, after the setup script has been run, 
cd to the bld/serial directory and enter
\code
> ./configure -q
\endcode
The -q command line option cause the script to print a list of which 
optional features are currently enabled, and the name of the current 
choice of compiler. The resulting output for the default configuration 
should look something like this:
\code
-m  OFF - MPI
-g  OFF - debugging
-p  ON  - pair potential
-b  ON  - bond potential
-a  OFF - angle potential
-d  OFF - dihedral potential
-e  OFF - external potential
-s  OFF - special potential
-l  OFF - McMd links (mutable bonds)
-s  OFF - McMd shift
-u  OFF - DdMd modifiers
-k  ON  - automatic dependency tracking
\endcode

Each line of this output before the last two shows whether an optional 
feature is currently set to be enabled (ON) or disabled (OFF). Note 
that only the nonbonded pair potential and bond potential are enabled 
by default, and that the angle, dihedral and other potentials are
disabled by default. If you need to run a simulation that uses any 
of these other types of potential, you will need to use the configure
script to enable the relevant features before compiling.

The output produced by running the configure script in the bld/parallel 
directory after setup looks similiar to that shown above, except that 
it should indicate that MPI is ON (enabled) by default in that 
directory.

Invoking the configure script from the simpatico/ root directory
with the -q option produces a output that first shows the current 
settings in both the bld/serial directory, which control the 
configuration of single-processor programs, and then the current
setting in the bld/parallel directory, which control the 
configuration of MPI programs.  If all changes have been applied
using the configure script in the root directory, the settings in
these two directories should be the same, except that MPI should 
be disabled in bld/serial and enabled in bld/parallel. 

\subsection install_configure_script_change_sub Enabling/Disabling optional features

In the output produced by invoking configure with the -q option, each line 
of the output before the last two begins with the name of the command 
line option for the configure script (a dash followed by a letter) that 
can be used to enable or disable an associated feature.  For example, 
the "debugging" feature is enabled or disabled using the "-g" option. 
Each feature can be enabled by using the associated command line option 
followed by "1" (ON), or disabled by using the 
option followed by "0" (OFF).  

For example, to enable debugging (which enables extensive run-time sanity 
checks, at a slight cost in speed) in code built in one build directory, 
one would enter
\code 
> ./configure -g1
\endcode
either from the root of the relevant build directory or from the
simpatico/ root directory. Invoking this command from a build directory
enables debugging in that build directory, whereas invoking it from
the simpatico/ root directory enables debugging in both the bld/serial 
and bld/parallel directories, thus applying the change to all code
that compiled out of source. Running "./configure -q" again after 
this change would show that debugging is now enabled.  To disable 
debugging before compiling, one would instead enter
\code 
> ./configure -g0
\endcode
These and any other desired changes in compile-time configuration must 
be made before invoking make to compile a program.  

Several features may be enabled and/or disabled in a single command.
For example, to enable the use of angle and dihedral potentials, which 
are disabled by default, one would invoke
\code
> ./configure -a1 -d1
\endcode
either from a build directory or the simpatico root directory.

Invoking the configure script with the -h ("help") option gives a
list of all command line options accepted by the configure command, 
along with some information about what C++ preprocessor macros are 
defined or undefined by specific commands.  All of the available 
optional features of the various simpatico programs are also discussed 
\ref user_options_page "elsewhere" in the web documentation.

The configure script in the simpatico/ root directory can be used to 
apply the same set of changes simultaneously to configuration files
in the bld/serial and bld/parallel directories. This version of the 
script should be invoked from the root directory. It accepts the same 
options as the configure scripts in the build directories, with one 
exception: It does not accept the "-m" option, which enables or 
disables MPI, because MPI should normally be enabled bld/parallel 
and disabled in bld/serial. The root directory configure script 
works by simply invoking the ./configure scripts in the bld/serial 
and bld/parallel directories. Changes made with this script do not 
effect the configuration of in-source builds. 

<BR>
\ref install_setup_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref install_page   (Up) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref install_compile_out_page (Next) 
*/
