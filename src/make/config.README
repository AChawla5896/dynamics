 ========================================================================
 file: $(SRC_DIR)/make/config.README

 ========================================================================
 Build Directories: In-source and Out-of-source builds

 All C++ source code for simpatico is contained in the simpatico/src
 directory. When source files are compiled, all files that are generated
 during compilation are installed in a "build" directory. Files generated
 during compilation include an object file for each source file (with 
 file extension *.o), a associated dependency files (extension *.d), and 
 several static library files (extension *.a).  

 The build directory used by simpatico may either be the same as the src/
 directory, or a different directory, depending on whether the code is 
 compiled "in-source" or "out-of-source".  When simpatico is compiled 
 "in-source", the build directory is the same as as the src/ directory. 
 In this case, the *.o and *.d files created by compiling each *.cpp 
 source file are placed in the same directory as the corresponding source 
 file.  When code is built "out-of-source", these generated files are 
 instead placed in an equivalent location in a separate build directory 
 tree. Any separate build directory must thus have the same directory 
 tree structure as the src/ directory. 

 The bld/serial and bld/parallel directory trees are the standard build 
 directories for "out-of-source" builds of serial (i.e., single-processor) 
 and MPI parallel programs, respectively. Out-of-source builds may be 
 performed by invoking make with appropriate targets from the root 
 simpatico/ directory. Invoking make from the root simpatico/ directory 
 builds serial code that does not require MPI in the bld/serial directory 
 and builds parallel MPI code in the bld/parallel directory. 

 In-source builds are instead performed by invoking the "make" command
 with appropriate targets from within the src/ directory.

 Each of the three standard build directories (src/, bld/serial, and
 bld/parallel) has a similar directory structure. Each build directory
 has five directories names util/, simp/, mcMd/, ddMd/, and tools/ that 
 each contain the source code for all classes defined in a corresponding 
 C++ namespace. We refer to these five directories as namespace level 
 directories.

 ========================================================================
 Build Configuration Files:

 Before any code in the simpatico package can be compiled, the
 command "./setup" must be invoked from the simpatico/ root directory.
 The setup script installs a set of configuration files and setup files
 in each of the standard build directories.

 After setup (i.e., after the setup script has been invoked from the
 simpatico root directory), each of the three standard build directories 
 (src/, bld/serial, and bld/parallel) will contain contain a set of six 
 configuration files, which are all files named "config.mk". After 
 setup, each build directory will have a main configuration file named 
 config.mk installed in the root of the build directory. Each build 
 directory will also have namespace-level configuration file, also 
 named config.mk, installed in each of the five namespace level 
 subdirectories (i.e., in each of the subdirectories named util/, 
 tools/, simp/, mcMd/ and ddMd/). 

 The set of configuration files in each build directory define a set 
 of makefile variables that control which features will be enabled and 
 disabled when the program is compiled. The main configuration file in 
 each build directory (e.g., bld/serial/config.mk for the bld/serial 
 directory) also defines variables that specify the name of the 
 compiler commands used to compile serial and parallel code, options
 passed to the compiler. Initial values for these compiler-specific
 variables are copied by the setup script from values given in a file
 in the src/make/compiler directory and incorporated into the initial
 value of the main config.mk file in each build directory.

 After setup, each build directory will also contains a bash script 
 named "configure" that can be used to enable or disable particular
 program features in the build directory before compiling.  The 
 configure script applies these changes by modifying the relevant 
 config.mk file or files. There is also a configure script in the
 simpatico/ root directory that applies the same set of changes to
 configuration files in the bld/serial and bld/parallel directories.
 Enter "./configure -h" to get a list of available command line
 options. 

 ======================================================================
 Directory Path Variables

 The main config.mk file in the src/ directory and each build directory
 assigns the following variables value that are absolute paths to various
 directories:

 ROOT_DIR = path to the simpatico/ root directory 
 BLD_DIR  = path to the build directory that will contain *.o files
 SRC_DIR  = path to the src/ directory, which contains source files
 BIN_DIR  = path to the directory in which executables are installed

 The setup script should set the value of ROOT_DIR in the main config.mk 
 file to the absolute path to the root simpatico/ directory, and should 
 set BLD_DIR to the absolute path to the build directory that contains 
 the config.mk file. 

 For the copy of the config.mk file in the src/ directory, which is
 used for in-source builds, values of BLD_DIR and SRC_DIR will be the 
 same, and will both point to the src/ directory. 

======================================================================
 Compiler Commands and Options:

The main config.mk file in each directory defines a number of variables
that define the commands used to invoke the compiler and the options
passed to the compiler and other utilities using during compilation.
These variables are used in pattern rules defined by makefile system
for compilation, linking and library creation. The relevant variables
are defined below by discussing how they appear in the relevant pattern
rules. 

 Compiler Pattern Rules:
 =======================

 Variables used in the compiler pattern rules include:

 CXX         - C++ compiler executable name 
 INCLUDES    - Directories to search for included header files
 CXXFLAGS    - flags used to compile individual source files
 TESTFLAGS   - flags used to compile unit test programs

 Pattern Rules:

 Pattern rules for compiling source files in the util/, simp/, mcMd/ 
 and ddMd/ directories are defined in the patterns.mk files in each 
 of these namespace-level directories. In each of these, the basic 
 compiler pattern rule is of the form:

 $(BLD_DIR)%.o:$(SRC_DIR)/%.cpp
	$(CXX) $(INCLUDES) $(DEFINES) $(CXXFLAGS) -c -o $@ $<

 This pattern compiles a *.cpp file in a subdirectory of the source 
 directory $(SRC_DIR) and creates a *.o object file in a corresponding
 subdirectory of the build directory, $(BLD_DIR). 

 The variable $(CXX) gives the name of the compiler executable, e.g.,
 gcc for the gnu compiler or icpc for intel, for serial programs. For 
 code compiled with MPI enabled (i.e., with UTIL_MPI defined) this 
 variable is usually set to CXX=mpicxx. The value mpicxx is the name
 of a standard script for compiling MPI C++ programs that should 
 invoke the compiler that was used to compile the mpi library with 
 any system-specific options required to specify locations of MPI
 header and/or library files. Use of the mpicxx script in a properly 
 installed MPI system enormously simplifies compilation and linking 
 of MPI programs.

 The variable $(INCLUDES) defines compiler options used to specify 
 paths to directories that contain any C++ header files that are 
 included by other C++ files. The value of $(INCLUDES) must specify 
 the path $(SRC_DIR) to the simpatico/src/ directory, to allow the 
 compiler to find header files that are part of the simpatico 
 package. 

 The variable $(DEFINES) in the above pattern is a stand-in for a 
 variable that specifies a list of C preprocessor macro definitions. 
 This variable is not defined in this main configuratio file.
 Instead, it is assigned different values for code in different 
 namespace level directories, which are defined in the namespace 
 level patterns.mk files. The value of $(DEFINES) for each namespace 
 contains a string of compiler options that use the compiler "-D" 
 option to define the set of preprocessor macro definitions used 
 to compile code in a particular namespace.

 The variable $(CXXFLAGS) specifies all flags that are used by the
 compiler, rather than only the preprocessor. This normally contains 
 the $(CXX_STD) string as a substring, as well as options that 
 specify the optimization level (e.g., -O3) and any desired compiler
 warnings (e.g., "-Wall").

 Archiver Recipes (Discussion):
 ==============================

 Makefile variable:

 AR          - path to archiver executable (AR = ar by default)

 Recipes:

 The simpatico build system creates a static library in each namespace
 level subdirectory of the build directory that contains all of the 
 *.o object files created in that namespace level directory. The path
 to that library is specified in the config.mk file in each namespace
 level directory, by the value of the variable with a name of the form
 dir_LIB, where dir is the name of the namespace level directory. For 
 example, the file src/mcMd/config.mk defines a variable mcMd_LIB that
 contains the absolute path to the mcMd library file. 

 The sources.mk file in each namespace level directory contains a 
 recipe to create this static library file. For example, the recipe 
 to create the static library $(mcMd_LIB) is given in the file 
 src/mcMd/sources.mk, and is given by

 $(AR) rcs $(mcMd_LIB) $(mcMd_OBJS)

 Here, $(mcMd_OBJS) is a string that contains absolute paths for all 
 of the *.o object files created by compiling source files in the 
 src/mcMd directory.

 Linker Recipes:
 ===============

 Makefile variable:

 LDFLAGS - flags passed to linker (empty by default)

 Recipes:

 The main makefile in the src/mcMd, src/ddMd, and src/tools namespace
 level directories each contains one or more recipes to create 
 executable program files. The makefile in the src/mcMd directory 
 contains recipes for both the mdSim MD simulation program and the 
 mcSim MC program, and the makefile in src/ddMd contains a recipe
 for the ddSim executable. As an example, the recipe for the mdSim 
 program is as follows:

	$(CXX) -o $(mdSim_EXE) $(mdSim).o $(LIBS) $(LDFLAGS)

 Here $(mdSim_EXE) is the path to the executable, which is installed 
 in the bin/ directory by default, $(mdSim).o is the path to the 
 object file created by compiling the src/mcMd/mdSim.cpp source 
 file, and $(LIBS) is a list of all required state libraries files

 The variable $(LDFLAGS) is usually empty, but can, if necessary, 
 be used to specify a non-standard path to a directory containing 
 the MPI library.  This variable can be left empty if the MPI 
 library is installed in a standard location such as /usr/lib or 
 /usr/local/lib, or if mpcixx is configured correctly.
 
======================================================================
 Miscellaneous Variables:

 MPIRUN  - command to run mpi, including -np option, e.g. "mpirun -np"

 This variable is used in recipes for some targets that run tests,
 for tests that require MPI.

======================================================================
