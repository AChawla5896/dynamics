#ifndef SPAN_PROCESSOR_H
#define SPAN_PROCESSOR_H

/*
* Simpatico - Simulation Package for Polymeric and Molecular Liquids
*
* Copyright 2010 - 2012, The Regents of the University of Minnesota
* Distributed under the terms of the GNU General Public License.
*/

#include <spAn/storage/Configuration.h>                // base class
#include <spAn/config/ConfigReaderFactory.h>           // member 
#include <spAn/trajectory/TrajectoryReaderFactory.h>   // member 
#include <spAn/analyzers/AnalyzerManager.h>            // member 
#include <util/misc/FileMaster.h>                      // member 


namespace SpAn 
{

   class ConfigReader;

   using namespace Util;

   /**
   * A post-processor for analyzing outputs of MD simulations.
   *
   * \ingroup SpAn_Storage_Module
   */
   class Processor : public Configuration
   {

   public:

      /**
      * Constructor
      */
      Processor();

      /**
      * Destructor
      */
      ~Processor();

      /// \name Initialization
      //@{
      
      /**
      * Process command line options.
      *  
      * \param argc number of arguments
      * \param argv array of argument C-strings
      */
      void setOptions(int argc, char * const * argv);

      using ParamComposite::readParam;

      /**
      * Open, read, and close parameter file.
      */
      void readParam(const char* filename);

      /**
      * Read parameters.
      */
      void readParameters(std::istream& in);

      //@}
      /// \name ConfigReader Interface 
      //@{
      
      /**
      * Set ConfigReader style  (creates a ConfigReader).
      *
      * \param string identifier for ConfigReader subclass
      */
      void setConfigReader(const std::string& configReaderName);

      /**
      * Return the current ConfigReader (create default if necessary).
      */
      ConfigReader& configReader();
   
      /**
      * Read a single configuration file.
      */
      void readConfig(std::ifstream& in);

      /**
      * Open, read and close a configuration file.
      */
      void readConfig(const std::string& filename);
   
      /**
      * Read and analyze a sequence of numbered configuration files.
      *
      * This function reads and analyzes a sequence of configuration files 
      * that were generated by running a previous simulation. The function 
      * reads files with names of the form inputPrefix() + n for integer 
      * suffixes min <= n <= max. 
      *
      * \param min  integer suffix of first configuration file name
      * \param max  integer suffix of last configuration file name
      * \param fileBaseName root name for dump files (without integer suffix)
      */  
      void analyzeDumps(int min, int max, const std::string& baseFileName);

      //@}
      /// \name Trajectory analysis
      //@{

      /**
      * Set TrajectoryReader style  (creates a TrajectoryReader).
      *
      * \param string identifier for TrajectoryReader subclass
      */
      void setTrajectoryReader(const std::string& trajectoryStyle);

      /**
      * Return the current TrajectoryReader (create default if necessary).
      */
      TrajectoryReader& trajectoryReader();
   
      /**
      * Open, read, analyze and close a single trajectory file.
      *
      * \param name of trajectory file.
      */
      void analyzeTrajectory(const std::string& filename);

      //@}
      /// \name Miscellaneous functions
      //@{
 
      /**
      * Return true if the FileMaster is active.
      */
      bool hasFileMaster() const;

      /**
      * Return FileMaster if active, or throw Exception.
      */
      FileMaster& fileMaster();

      //@}

   private:

      /// Pointer to current ConfigReader object.
      ConfigReader* configReaderPtr_;

      /// Pointer to current TrajectoryReader object.
      TrajectoryReader* trajectoryReaderPtr_;

      /// Factory for choosing ConfigReader at run time.
      ConfigReaderFactory configReaderFactory_;

      /// Factory for choosing TrajectoryReader at run time.
      TrajectoryReaderFactory trajectoryReaderFactory_;

      /// Manager for analyzers
      AnalyzerManager analyzerManager_;

      /// FileMaster (optionally activated)
      FileMaster fileMaster_;

      /// String identifier for ConfigReader class name
      std::string configReaderName_;

   };

}
#endif
