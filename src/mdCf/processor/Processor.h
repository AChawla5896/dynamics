#ifndef MDCF_PROCESSOR_H
#define MDCF_PROCESSOR_H

/*
* Simpatico - Simulation Package for Polymeric and Molecular Liquids
*
* Copyright 2010 - 2012, David Morse (morse012@umn.edu)
* Distributed under the terms of the GNU General Public License.
*/

#include <mdCf/storage/System.h>              // base class
#include <mdCf/configIos/ConfigIoFactory.h>   // member 
#include <mdCf/analyzers/AnalyzerManager.h>   // member 
#include <util/misc/FileMaster.h>             // member 


namespace MdCf 
{

   class ConfigIo;

   using namespace Util;

   /**
   * A post-processor for analyzing outputs of MD simulations.
   *
   * \ingroup MdCf_Module
   */
   class Processor : public System
   {

   public:

      /**
      * Constructor
      */
      Processor();

      /**
      * Destructor
      */
      ~Processor();

      using ParamComposite::readParam;

      /**
      * Open, read, and close parameter file.
      */
      void readParam(const char* filename);

      /**
      * Read parameters.
      */
      void readParameters(std::istream& in);

      /**
      * Set ConfigIo style.
      */
      void setConfigIo(std::string configIoName);

      /**
      * Return the ConfigIo (create default if necessary).
      */
      ConfigIo& configIo();
   
      /**
      * Read a single configuration file.
      */
      void readConfig(std::ifstream& in);

      /**
      * Open, read and close a configuration file.
      */
      void readConfig(const char* filename);
   
      /**
      * Open, read and close a configuration file.
      */
      void readConfig(const std::string& filename);
   
      /**
      * Write a single configuration file.
      */
      void writeConfig(std::ofstream& out);

      /**
      * Open, write and close a configuration file.
      */
      void writeConfig(const std::string& filename);

      /**
      * Read and analyze a sequence of numbered configuration files.
      *
      * This function reads and analyzes a sequence of configuration files 
      * that were generated by running a previous simulation. The function 
      * reads files with names of the form inputPrefix() + n for integer 
      * suffixes min <= n <= max. 
      *
      * \param min  integer suffix of first configuration file name
      * \param max  integer suffix of last configuration file name
      * \param fileBaseName root name for dump files (without integer suffix)
      */  
      void analyzeDumps(int min, int max, std::string fileBaseName);

      /**
      * Analyze a trajectory file.
      */
      void analyzeTrajectory(std::string& filename);

      /**
      * Return true if the FileMaster is active.
      */
      bool hasFileMaster() const;

      /**
      * Return FileMaster if active, or throw Exception.
      */
      FileMaster& fileMaster();

   private:

      /// Pointer to current ConfigIo object.
      ConfigIo* configIoPtr_;

      /// Factory for generating ConfigIo at run time.
      ConfigIoFactory configIoFactory_;

      /// Manager for analyzers
      AnalyzerManager analyzerManager_;

      /// FileMaster (optionally activated)
      FileMaster fileMaster_;

      /// String identifier for ConfigIo class name
      std::string configIoName_;

      /// Name of configuration or trajectory input file
      std::string configFileName_;

   };

}
#endif
