#-----------------------------------------------------------------------
# file: src/compiler.mk
#
# This makefile fragment is included by all other makefiles. It defines
# absolute paths for the root and src/ directories, specifies the choice
# of compiler and various compiler options and (optionally) defines the 
# macro MAKEDEP that enables automatic dependency generation.
# 
# Users may need to modify the following variables:
#
# ROOT_DIR = absolute path to the root (e.g., trunk) directory.
# COMPILER = label for the compiler (gcc, intel, etc.)
#
# Compiler options may also be modified by modifying values of CXXFLAGS
# etc. within the ifeq() ... endif block for the relevant compiler.
# Users may also wish to uncomment the definition of MAKEDEP, as 
# discussed below.
#
# Users may modify the file src/compiler.mk, but should avoid modifying 
# the default copy src/compiler.mk_r, which is under version control. 
# The operational file src/compiler.mk is created by the configure script,
# by making a copy of src/compiler.mk_r and modifying the value of the
# variable ROOT_DIR (which has a placeholder value in src/compiler.mk_r).
# After the configure script is run from the root directory (e.g., the
# trunk/ directory of the repository), the value of ROOT_DIR should be 
# set to the absolute path to that directory.
#-----------------------------------------------------------------------
# Absolute paths

ROOT_DIR=PWD
SRC_DIR=$(ROOT_DIR)/src
BIN_DIR=$(ROOT_DIR)/bin
#-----------------------------------------------------------------------
# Automatic dependency generation:
#
# To enable automatic dependency generation: (1) uncomment the line below
# that defines MAKEDEP, (2) extend your unix PATH environment variable to
# include the Simpatico $(ROOT_DIR)/bin directory, and (3) extend the 
# PYTHONPATH variable to include the $(ROOT_DIR)/tools/python directory.
# The script makeDep is located in the $(ROOT_DIR)/bin/ directory, and is 
# invoked as a side effect of compilation in order to generate a dependency 
# file.  The PATH must include the bin/ directory in order for the shell to 
# find the makeDep script.  The PYTHONPATH must include the tools/python 
# directory in order for the python interpreter to find the python modules 
# that are used by the makeDep script.
 
#MAKEDEP=$(ROOT_DIR)/bin/makeDep

#-----------------------------------------------------------------------
# Selecting a compiler:
#
# To select a compiler for which default settings are available, set
# the variable COMPILER by uncommenting one of the following lines
# and commenting out all others. The default choice is gcc, the gnu
# compiler collection.  The user may modify values of compiler options 
# and/or add blocks for other compilers.

# String values that end with _mpi set compiler options so as to 
# link to an mpi library. All of these blocks use the mpicxx script
# to invoke the compiler, but users may modify this if needed.

COMPILER:=gcc
#COMPILER:=gcc_mpi
#COMPILER:=intel
#COMPILER:=intel_mpi
#COMPILER:=pathscale
#COMPILER:=pathscale_mpi

# ------------------------------------------------------------------
# Each of the following blocks define makefile variables appropriate
# to a particular compiler that has been used during development. 
# Specifically, each block sets the variables:
#
# CXX        - path to C++ compiler
# CXXFLAGS   - flags used to compile source files, without linking
# LDFLAGS    - flags used to compile and link a main program
# TESTFLAGS  - flags usd to compile unit test programs
# AR         - path to archiver, to create library (*.a) files
# ARFLAGS    - flags used by archiver
#
# Blocks for compilers that link to the MPI library all must define 
# UTIL_MPI=1. These blocks all also set CXX=mpicxx, which is the
# name of a script that invokes the mpi compiler on the systems 
# we have used at the Minnesota Supercomputing Institute. On these
# systems, the actual choice of compiler used by mpicxx is determined
# by loading a module (e.g., module load intel-mpi).
# ------------------------------------------------------------------

#-- Gnu GCC compiler (Serial) ------
ifeq ($(COMPILER),gcc)
  CXX=g++
  CXXFLAGS= -O3 -ffast-math -Wall -Winline -std=c++98 -pedantic
  LDFLAGS=
  TESTFLAGS= -Wall -std=c++98 -pedantic
  AR=ar
  ARFLAGS=rcs
endif

# -- Gnu GCC compiler (MPI) ------
ifeq ($(COMPILER),gcc_mpi)
  CXX=mpicxx
  CXXFLAGS= -O3 -ffast-math -Wall -Winline -std=c++98
  LDFLAGS=
  TESTFLAGS= -O3 -ffast-math -Wall -std=c++98 -pedantic
  AR=ar
  ARFLAGS=rcs
  UTIL_MPI=1
endif

# -- Intel ICC compiler ----
ifeq ($(COMPILER),intel)
  CXX=icpc
  CXXFLAGS= -fast -ansi
  LDFLAGS= -fast
  TESTFLAGS= -ansi
  AR=xiar
  ARFLAGS=rcs
endif

# -- Intel ICC MPI compiler ----
ifeq ($(COMPILER),intel_mpi)
  CXX=mpicxx
  CXXFLAGS= -ansi
  LDFLAGS=
  TESTFLAGS= -ansi
  AR=xiar
  ARFLAGS=rcs
  UTIL_MPI=1
endif

# -- PathScale compiler -----
ifeq ($(COMPILER),pathscale)
  CXX=pathCXX
  CXXFLAGS= -Ofast
  LDFLAGS= -Ofast
  TESTFLAGS=
  AR=ar
  ARFLAGS=rcs
endif

# -- PathScale compiler -----
ifeq ($(COMPILER),pathscale_mpi)
  CXX=mpicxx
  CXXFLAGS= -Ofast
  LDFLAGS= -Ofast
  TESTFLAGS=
  AR=ar
  ARFLAGS=rcs
  UTIL_MPI=1
endif

