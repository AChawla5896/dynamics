Housekeeping:
------------

- Move DdMd::Simulation::computePairEnergies() and pairEnergies()
  to PairPotential class, modify PairEnergy(ies) analyzer classes.

- Clean up PairEnergyAverage class (e.g., pairs_ class apears to be one pair,
  accumulator_ used as name for pointer, not derived from AverageAnalyzer).

Avoiding User Specified Memory Limits
-------------------------------------

- Change CellList to self-allocate and de-allocate and re-allocate as 
  needed. This is already implemented in McMd. Get rid of maxBoundary_ 
  parameter.

- Change PairList so that it can re-allocate on overflow, to avoid
  crash on exceeding pairCapacity. Allow different processors to have
  different capacities - no communication is needed. 

- Change PairList so that if pairCapacity has not been set previously,
  it does a dry run to count the number of pairs, allocates, and then
  goes through again to actually file required data structures. This
  will allow initial initialization without an estimate of the number
  of pairs, or repeated re-allocation.

- Create a function to reallocate AtomStorage, which will require the
  data to be copied. 

- Create a modifyAtomPointers Signal within the AtomStorage, and create 
  a public function of AtomStorage that allows functions to be registered 
  as observers of this signal.

- Create a function of the GroupStorage template that re-sets pointers
  to atoms. Add code to register this with the modifyAtomPointers signal.

- Register a function to either clear or clear and rebuild the pair 
  list with the modifyAtomPointers signal. 

- Create a function of atomStorage that can be called during configuration 
  file reading that creates a default allocation for AtomStorage from 
  knowledge of the total number of atoms on all processors, based 
  on an assumption of a homogeneous distribution, with some margin 
  for inhomogeneities.

- Create a function of GroupStorage that can be used when reading the
  configuration file to create an initial default allocation.

- Note: Reallocation of the array of Atom objects re-quires resetting 
  of pointers to atoms in groups, but the reverse is not true.  It 
  appears that GroupStorage objects may be reallocated and copied to
  a new array internally, as needed, without effecting any code 
  outside the implementation.  This would cease to be true only if
  other code stored pointers to groups. Provide a private Signal 
  and a public function to register observers, in order to allow
  outside code to react appropriately when this happens, if needed.

Species
-------

- Add an array of Species, which is optionally allocated. 

- Add a SmpConfig read/writer that can read Species topology 
  information.  This can simply call the readStructure method of 
  Species, but will need to add code to read the moleculeCapacity.

- Add a SmpTrajectory writer. Decide whether this should optionally
  include a Species block in the header.

Coulomb
--------

- Add framework for coulomb interactions, similar to the one developed
  for McMd.

- Implement Ewald coulomb interactions in DdMd.

- Implement PPPM Ewald coulomb interactions.

Exchanger:
----------

- Write separate algorithm for initial ghost exchange, to reduce memory 
  requirements See doc/notes/ddMd/initGhosts

- Add memory usage statistics, to measure which communication step (atom
  exchange or ghost exchange) uses the most memory

- Improve error checking of conditions that can lead to incomplete groups.
  Under what conditions can a group span two boundaries in the same 
  direction ?  Is there a bound to how far a ghost can move without 
  causing a possible error ?

Atom Sorting:
-------------

- Implement periodic sorting of atoms. Note: Like re-allocation, this will
  require resetting of all pointers stored in Group objects, and rebuilding
  of the pairlist. 

Non-orthogonal boundaries:
--------------------------

- Generalize makeSnapShot and needsExchange methods in AtomStorage to
  allow for non-orthogonal boundaries (requires changes to Boundary)

- Modify calculation of distances between cells in construction of Offset
  array in DdMd::CellList. Perhaps move calculation to Boundary class

Buffer:
-------

- Allocate in bytes, remove atomCapacity and ghostCapacity 
  (see doc/notes/ddMd/Buffer)

- Make sure memory statistics include all usage, including setup

- Consider moving allocation of Buffer to Exchanger

AtomStorage:
------------

- Make sure memory statistics include all usage, including setup, so
  that the user has a better indication of when the ghost capacity 
  needs to be increased.

- Consider adding mechanism to increase capacity as needed.

Moving GroupStorage to Potential class:
---------------------------------------

- see doc/notes/ddMd/GroupStorage

- Make each GroupStorage a member of the associated potential

Perturbation:
-------------

- Add perturbation class and class hierarchy for use with multi-system
  parallel simulations

Hybrid MD
---------

- Finish and test transactions in AtomStorage (in transactions branch)

- Add transactions to GroupStorage (in transactions branch)


Single Processor Operation 
--------------------------

- Is this necessary or is it a pipe dream? We already have mdSim.

- If we do this: Modify Distributor, Collector, ConfigIo, and Exchanger 
  classes to work ifndef UTIL_MPI, continue with other classes, to enable 
  single processor operation with no MPI

