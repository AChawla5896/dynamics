   int nSystem = 2;
   MPI::Intracomm worldComm = MPI::COMM_WORLD;
   int worldRank = worldComm.Get_rank();
   int worldSize = worldComm.Get_size();
   if (worldSize % nSystem != 0) {
      UTIL_THROW("World communicator size is not a multiple of nSystem");
   }
   int systemSize = worldSize/nSystem;
   int systemId  = worldRank/systemSize;
   MPI::Intracomm systemComm = worldComm.Split(systemId, worldRank);

   simulation.fileMaster().setDirectoryId(systemId);

   // Set log file for processor n to a new file named "n/log"
   // Relies on initialization of FileMaster outputPrefix to "" (empty).
   std::ofstream logFile;
   simulation.fileMaster().openOutputFile("log", logFile);
   Log::setFile(logFile);

