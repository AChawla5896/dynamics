/*! \page compile_page Compilation

Simpatico is written in ANSI 1998 standard C++. It must be compiled 
from source. The single-processor version of the code has no external 
dependencies.  A Message Passing Interface (MPI) library is required 
to run on multiple processors.  It has been developed and tested using 
the gcc and intel compilers in linux and the gcc compiler in Mac OS X. 
It should compile with any modern, standard compliant C++ compiler. 
The build system uses unix makefiles, using gnu make (gmake), and so 
will work only in a unix-like (e.g., linux or Mac OS X) environment. 

All of the the header (*.h) and source (*.cpp) files for Simpatico are
are in the src/ directory and its subdirectories. The source files for 
the MC and MD simulation programs, named mcSim.cpp and mdSim.cpp, are 
in the src/main subdirectory.  Source and header files for all of the 
classes used by these programs are in two directory trees rooted at 
src/util and src/mcMd. 

\section compile_section Compiling
The following procedure is normally sufficient to compile all of the 
classes and the mcSim and mdSim main programs, using the ubiquitous
gcc compiler on a linux or Mac machine.  Here, all references to the 
root directory refer to the simpatico/ that is the parent of the 
src/, doc/, bin/ and lib/ directories. Instructions:

  - Change working directory (cd) to the root simpatico/ directory.

  - Enter "./configure".

  - Enter "cd src" (change working directory to the src/ directory)

  - Enter "make all"

The "./configure" script is only required the first time the library 
is compiled. This configure commmand must be entered from within root 
directory.

If compilation is successful, a *.o object file will be created for
each class in the util/ and mcMd/ directory trees, which will be 
placed in the same directory as the corresponding header (*.h) and 
source (*.cpp) files. Two static library (*.a) files containing all 
of the objects in the Util and McMd namespaces will be created and 
(by default) installed in the lib/ directory.  Two executable files 
for the main MC and MD programs are also created, which (by default) 
are named mcSim and mdSim, and installed in the Simpatico bin/ 
directory.

If "make all" fails, inspect the file src/compiler.mk, which should
have been created by the configure command. Make sure that the makefile 
variable $(ROOT_DIR) is set to the correct path for the Simpatico root 
directory, and that the makefile variables that specify choices of 
compiler and compiler options are set to appropriate values for your 
system.  

To remove all of the object files, libraries, and executable files 
created by "make all", simply enter "make clean" from the src/ directory. 

To recompile the entire class library and main programs, after 
changing any configuration file, cd to the src/ directory, enter 
"make clean", and then enter "make all". 

The directory to which the main executables are written is given by 
the makefile variable BIN_DIR defined the file src/main/defines.mk. 
The names of these files are given by the values of the macros 
MCSIM_EXE and MDSIM_EXE, respectively. Users may change the name 
and location of the executables by changing these variables before 
compiling. Alternatively, on can simply rename or move the executable
files after they are compiled. 

If you do leave the executables in the Simpatico bin/ directory (the 
default location), you should add this directory to your unix PATH 
environment variable, so that mdSim and mcSim can can be invoked by 
these names, without requiring the use of a full path to the 
executable files. 

\section compile_config_section Configuration Files

The src/ directory and its subdirectories contains several configuration 
files that users may want or need to modify in order to change compiler 
options or to enable or disable specific features. The default, or 
repository, versions of these files have names that end with the 
suffix *_r. The default configuration files are:

    - src/compiler.mk_r
    - src/util/defines.mk_r
    - src/mcMd/defines.mk_r
    - src/main/defines.mk_r
    - src/mcMd/boundary/Boundary.h_r

Running the "./configure" script the src directory copies each of 
these default configuration files to a modifiable user copy. Each 
of these user copies has the same name as the repository version, 
without the _r suffix, and is placed in the same directory as the 
repository version. The user copies (without the _r suffix) are 
the ones that are actually used during compilation. Maintaining 
a distinction between repository and user copies of these files 
allows users to modify configuration files while leaving the 
default versions untouched.

The configuration files whose names end in the suffix *.mk are 
makefile fragments, which are included in other makefiles. 
The file Boundary.h file is a C++ header file, which is included 
by other C++ files. Each of these files is discussed separately 
below:

The file src/compiler.mk defines makefile variables that 
specify the choice of C++ compiler and compiler options. 
It also defines variables ROOT_DIR and SRC_DIR that 
represent the paths to the Simpatico root and source 
directories, and a variable that MAKEDEP that (when defined)
enables automatic dependency generation.

The files src/util/defines.mk and mcMd/defines.mk optionally
define makefile variables that control whether corresponding 
C++ preprocessor macros are defined during compilation, in 
order to enable or disable optional features of the code. Each 
of the relevant makefile variables has the same name as a C++ 
preprocessor macro that it controls. For example, defining 
the makefile variable "UTIL_DEBUG" causes the C++ UTIL_DEBUG
to be defined by the compiler.  Each such makefile variable 
is defined in a line that is commented out in the default 
version of the file, and can be uncommented to cause the 
associated preprocessor macro to be defined, and thus enable 
some feature of the code. For example, uncommenting the line 
"UTIL_DEBUG=1$ in src/util/defines.mk causes the compiler to 
be passed a string "-DUTIL_DEBUG", which defines the C++ macro 
UTIL_DEBUG, and thus enables conditional compilation of 
extensive error checks in many source files.  The file 
src/util/defines.mk contains code to define C++ preprocessor
macros that are used throughout both the Util and McMd 
namespaces. The file src/mcMd/defines.mk contains code to 
define preprocessor macros that are used only in the McMd 
namespace. These files also define variables $(UTIL_LIB) and 
$(MCMD_LIB) that specify the locations for two static library
files. 

The file main/defines.mk defines a pair of makefile variables 
that specify the names and locations of the executable files 
for MC and MD simulations. 

All of the C++ preprocessor macros used in Simpatico, and the 
program features they enable or disable, are discussed in a
page about \ref preprocessor_page. 

The file src/mcMd/boundary/Boundary.h defines a typedef that 
specifies what class should be used to represent periodic 
boundary conditions throughout code. By default Boundary is 
defined to be a synonym for OrthorhombicBoundary, which is a
class that represents a periodic orthorhombic simulation cell. 
For the moment, there is little reason to change this. The 
use of a typedef, rather than a hard-coded class name, is 
intended to ease the later introduction of non-orthogonal 
unit cells.

\section dependency_doc_section Dependency Generation 

The Simpatico makefile system is set up to allow automatic 
generation and updating of files that list the dependencies 
of all source files. This feature is disabled by default, 
but may be enabled by following instructions given below.

Automatic dependency generation is not needed in order compile
the code, or to recompile it. Until this feature is enabled, 
however, the only safe way to recompile the code after changing 
any C++ file or configuration file is to do a clean rebuild, 
by entering "make clean" followed by "make all" from the src/ 
directory. Automatic dependency generation is thus useful for
developers who make frequent changes to a few C++ header or 
source files, by allowing them to automatically recompile only 
those source files that are effected by these changes.

Automatic dependency generation uses a executable python 
script named makeDep in the bin/ directory. This script imports 
several python modules from the directory tools/python. The 
system uses the -MM option of the gnu g++ C++ compiler to do 
the actual analysis of dependencies, and uses a python scripts 
to edit the output produced by g++. To operate, the system thus 
requires that:

  - The g++ gnu C++ compiler executable (or a link to it with 
    this name) must be accessible in a directory in the shell 
    PATH variable.

  - A python interpreter must be accessible.

  - The Simpatico tools/python/ directory must be in the shell 
    variable PYTHONPATH, which is the python module search path. 

  - The makefile variable MAKEDEP must be defined in the file 
    src/compiler.mk. (The definition is commented out by default).

The gcc compiler and a python interpreter are installed by default 
on modern linux installations, and on Mac OS X, so these requirements
should not be a problem. To enable automatic dependency generation 
(after running the configure script) one must thus normally: 

  - Add the Simpatico tools/python directory to the PYTHONPATH 
    shell variable, and 

  - Uncomment the line that defines the variable MAKEDEP in the 
    file src/compiler.mk.

After making these changes, enter "make clean; make all" once 
more from the src/ directory, to force recompilation of all source 
files. After compilation is complete, a new dependency file with a 
suffix *.d will be created alongside each *.cpp source file, in 
addition to a new *.o object file.  The *.d dependency file 
associated with an object file will also be regenerated whenever 
the object file is regenerated.

Automatic dependency generation works by applying the script 
bin/makeDep to each *.cpp source file whenever that file is 
compiled, as a side effect of compilation.  This behavior is 
dictated by the pattern rules defined in src/util/patterns.mk 
and src/mcMd/patterns.mk. The makeDep script generates (or 
regenerates) a *.d file with the same base name as the source 
file, in the same directory.  Each *.d dependency file defines 
a makefile rule for the *.o object file target that contains
a list of files upon which that file depends.  This dependency
list contains the *.cpp file and all of the header files that 
this source file includes, including headers that are included 
indirectly. Once this dependency file exists, it will be used 
the next time "make all" is invoked in order to determine if 
the corresponding source file needs to be recompiled as a 
result of changes in any of the header files upon which it 
depends. Until this dependency file is created, the "make all" 
command causes compilation of all of the source files in the 
directory tree rooted at the directory from which the command 
is issued. 

The dependency list for every *.o file contains the files 
src/compiler.mk, src/util/defines.mk and (for files in the 
src/mcMd directory) src/mcm/defines.mk. This is because 
these makefile fragments contain definitions that control 
compiler options and conditional compilation, and can thus 
effect the result of compiling any source file.  Modifying 
any of these makefile fragments will thus force recompilation 
of all or most of the C++ source files.  Modifying 
src/compiler.mk or src/util/defines.mk forces recompilation 
of the entire class library, while modifying mcMd/defines.mk 
forces recompilation of all classes in the src/mcMd directory.

Dependency generation is disabled by default in order to allow
inexperienced users to quickly compile the code with the 
simplified instructions given above 
("./configure; cd src; make all"), without having to first 
modify their PYTHONPATH. This is sufficient for users who want 
to try out the code, but who do not immediately need to modify 
or add to the source code.

\section compile_doc_section Documentation
The html documentation you are reading was generated using the 
dOxygen documentation utility.  If dOxygen is installed on your 
machine, you can regenerate all of the html documentation by 
changing the working directory to the src/ directory and entering
<code>
    /src> make doc
</code>
from there. This generates documentation for all of the code in 
the Util and McMD namespaces. The resulting html documentation 
is deposited in the doc/html directory. 

The text of the page you are reading now, along with the other 
pages of introductory material, are in the src/dox directory. These
are written in plain text, and so are readable with a text editor.
Documentation for each C++ class is extracted from documentation 
blocks in the class header file. 

Entering 'make cleandoc' from the src/ directory will remove all the 
html documentation from the doc/html directory. If you have a copy
of Simpatico that contains html documentation, do NOT do this unless 
you are sure that you will be able to regenerate the documentation by 
running dOxygen. If you have the html documentation, and are not 
sure whether you can regenerate it, recursively copy (cp -R) the 
doc/html directory to another location before entering make cleandoc.

<ul>
 <li> \ref guide_page   (Up)    </li>
 <li> \ref usage_page (Next)  </li>
</ul>

*/
