/*! \page compile_page Compilation

Simpatico is written in ANSI 1998 standard C++. It must be compiled 
from source. The single-processor programs mcSim and mdSim have no 
external dependencies.  The ddSim program requires a Message Passing 
Interface (MPI) library to run on multiple processors. An MPI library
is also required to run mcSim or mdSim on multiple processors, for, 
e.g., replica exchange simulations. 

Simpatico has been developed and tested using the gcc and intel compilers 
in a linux environement and the gcc compiler in Mac OS X.  It should 
compile with any modern, standard compliant C++ compiler.  

The build system uses unix makefiles, using gnu make (gmake), which
is a standard part of in any unix-like environment (linux or Mac OS). 
We assume that the makefile system would also work using Cygwin on 
Windows operating system, but have never tried this.

The source code for Simpatico is contained in a directory tree with
a root directory named simpatico/. All of the the header (*.h) and 
source (*.cpp) files for Simpatico are are in the src/ subdirectory.
By default, executable files are installed in the bin/ subdirectory. 
Throughout this documentation, paths that do not start explicitly 
with "simpatico/" should be understood to refer to subdirectories 
of the simpatico/ root directory.

\section configure_section Configuration
Before the first time you compile any of the programs, you must:

  - Change working directory (cd) to the root simpatico/ directory.

  - Enter "./configure".

The configure script only needs to be invoked once, before the 
first time you compile any program. The configure script must be
entered from within the root directory. The script creates 
several configurations files that are required for compilation.
The contents of the resulting configuration files are discussed
below (\ref compile_config_section).

After running the configure script, inspect the file src/compiler.mk
makefile fragment, which is created by the configure script. The 
value of the variable ROOT_DIR must be set to the absolute path to 
the simpatico/ root directory on your machine. 

The COMPILER variable defined in src/compiler.mk chooses from among 
several different compilers. By default, COMPILER is set to "gcc", 
which denotes the gnu C++ compiler.  To choose another compiler from 
among those listed (e.g., the intel compiler), comment out the line 
defining COMPILER=gcc and uncomment the line that uses the preferred 
compiler.  Compiler names such as gcc_mpi and intel_mpi that end with 
the string _mpi denote compilers that link to an MPI library. These 
are needed to compile ddSim or the multi-processor versions of mcSim 
and mdSim.

\section compile_mcMd_section Compiling mcSim and mdSim 

To compile the default single-processor versions of the mcSim and 
mdSim, using the default gcc compiler, you must first run the
configure script (see above), and then:

  - Change working directory to the src/ directory ("cd src").

  - Enter "make mcMd"

If successful, the above procedure should create executables 
bin/mcSim and bin/mdSim for single-processor MC and MD simulations. 
To do so, it first compiles all of the classes in the src/util, 
src/inter, and src/mcMd directories, and creates three static
library files that contain the resulting objects. The *.o 
object file that is created by each *.cpp class in these 
three is placed in the same directory as the corresponding 
source file, which usually also contains the corresponding
header (*.h) file.  Three static library (*.a) files named 
libutil.a, libinter.a and libmcmd.a will also be created and
(by default) placed in the lib/ directory. These libraries
contain all of the objects from the util/, inter/, and 
mcMd/ directories, respectively. These libraries are linked
to the main programs to create the executables.

If the above procedure fails, inspect the file src/compiler.mk, 
and make sure that the variable $(ROOT_DIR) contains the correct
path for the simpatico/ root directory, and that makefile 
variables specify choices of compiler executable name and 
compiler options that are appropriate for your system.  

Users may change the locations of the executable and library 
files. The directory to which all executables files are written 
is given by the makefile variable BIN_DIR defined in the file 
src/compiler.mk. All libraries are written in the directory
specified by the variable LIB_DIR, which is also defined in 
src/compiler.mk. The names of the MC and MD single-processor 
executables (mcSim and mdSim, by default) are given by the 
values of the variables MCSIM_EXE and MDSIM_EXE defined in 
src/mcMd/defines.mk.  Users may thus rename the executables 
either by changing the values of any of these makefile 
variables, or by simply moving the executable files after 
they are created. 

To make the executables accessible from the command line
(without requiring the use of an absolute path), users 
should either add the directory containing these files to 
their unix PATH environment, or install all executable 
files in a directory that is already in their PATH.

To remove all of the object files, libraries, and executable 
files created by "make mcMd", enter "make clean-mcMd" from
the src/ directory. Entering "make clean" removes all of
these files, as well as any created by the "make ddMd" 
command (discussed below).

\section compile_ddMd_section Compiling ddSim

To compile, the multi-processor ddMd program, one must
select a compiler that links to an MPI library, and then
follow a procedure similar to that used to compile mdSim
and mcSim:

  - Edit the file src/compiler.mk by choosing a value for 
    the COMPILER string that ends with a suffix _mpi, such 
    as gcc_mpi or intel_mpi. These compilers link to the 
    MPI library. 

  - cd to the src/ directory (if not already there).

  - Enter "make ddMd".

If successful, this procedure will create an executable
named bin/ddMd. To do so, it will recompile all of the code 
in the src/util/ and src/inter/ directories, and compile the 
classes and the main program in the src/ddMd/ directory. It 
will create new MPI-enabled versions of the libraries containing 
objects from the src/util/ and src/inter/ directories (which 
are distinguished from the serial versions by the addition 
of a suffix _m to the end of each library name), and create 
a library lib/libddMd.a for the classes in the ddMd/
directory.

If the above procedure fails, check the name and options 
for the compiler. The gcc_mpi and intel_mpi compilers in the 
default makefile use a compiler name "mpicxx", which is the
name of a script that is used on computers at the Minnesota
Supercomputig Institute (where the code was developed) to
represent an mpi-enabled compiler that is selected by loading
an appropriate software module. To compile using openmpi on 
a multi-core Mac laptop, we replaced "mpicxx" by 
"openmpicxx". Users may have to change this and/or other
definitions in the compilers.mk file. 

The name of the parallel MD executable (ddSim by default)
is defined by the variable DDSIM_EXE defined in 
src/ddMd/defines.mk. The executable is placed in the 
BIN_DIR directory.

To remove all object files libraries and executable created by 
the "make ddMd' command, enter "make clean-ddMd".

\section compile_config_section Configuration Files

The src/ directory and its subdirectories contains several 
configuration files that users may need to modify in order 
to change compiler options or to enable or disable specific 
features of the code. The default repository versions of 
these files have names that end with the suffix *_r 
(which stands for "repository").  The default configuration 
files are:

    - src/compiler.mk_r
    - src/util/defines.mk_r
    - src/inter/defines.mk_r
    - src/mcMd/defines.mk_r
    - src/ddMd/defines.mk_r
    - src/util/boundary/Boundary.h_r

Running the "./configure" script from the src directory copies 
each of these default configuration files to a modifiable user 
copy. Each of these user copies has the same name as the 
repository version, without the _r suffix, and is placed in 
the same directory as the repository version. Only the user 
copies (without the _r suffix) are used during compilation. 
These user files are not retained in the git repository that
we use to manage the code, and so can be modified in a 
users git repository without effecting synchronization
between the user repository and the origin repository from
which it was cloned. 

Files with names that end in *.mk are makefile fragments that 
are included in other makefiles. 

The file src/compiler.mk defines makefile variables that specify 
the choice of C++ compiler and compiler options (as discussed
above). It defines variables ROOT_DIR, SRC_DIR that represent 
the paths to the Simpatico root directory, source directories,
and the directory in which the executables should be installed. 
The default version of this file also contains a commented out 
definition of a variable MAKEDEP that (when uncommented) enables 
automatic dependency generation.

The makefile fragments src/util/defines.mk, src/inter/defines.mk, 
mcMd/defines.mk, and ddMd/defines.mk can be used to define makefile 
variables that enable or disable optional features of the code 
at compile time. Each of these files contains one or more commented 
out definitions for makefile variables that, when defined, cause 
corresponding C++ preprocessor macros to be defined during
compilation. Each such makefile variable has the same name as an 
associated preprocessor variable that it controls.  For example, 
uncommenting the line that defines the makefile variable "UTIL_DEBUG" 
causes the string of options that are passed to the compiler to 
include a string "-DUTIL_DEBUG" that causes the C++ macro 
UTIL_DEBUG to be defined during preprocessing. This preprocessor
macro enables various assertions and sanity checks that are 
useful during development and debugging, but that are turned
off by default in the production version of the code. 

All of the C++ preprocessor macros used in Simpatico, and the 
program features they enable or disable, are discussed in a
page about \ref preprocessor_page. 
Preprocessor macros defined in the file src/mcMd/defines.mk, all
have names that begin with a prefix MCMD_*, and are used only 
in the code in the McMd namespace, or in directory src/mcMd.  
Preprocessor macros defined in the file src/ddMd/defines.mk have
names that begin with a prefix DDMD_, and are used only in the
DdMd namespace, or the directory src/ddMd.
Preprocessor macros defined in the file src/inter/defines.mk
have names that begin with a prefix INTER_, and can appear 
in the Inter, McMd, and DdMd namespaces, but not in the Util
namespace.  Preprocessor macros defined in the file 
src/util/defines.mk have names that begin with the prefix UTIL_, 
and can be used in any namespace (Util, Inter, McMd or DdMd). 
The file UTIL_MPI, which enables MPI communication, is defined
(or not) in the file src/compiler.mk, and may also be used in
by source files in any namespace. 

Each of the defines.mk makefile fragments also defines a variable
that specifies the name of the static library created from the 
objects files in the associated namespace. 

The file src/mcMd/boundary/Boundary.h defines a typedef that 
specifies what class should be used to represent periodic 
boundary conditions throughout the code. By default Boundary is 
defined to be a synonym for OrthorhombicBoundary, which is a
class that represents a periodic orthorhombic simulation cell. 
For the moment, there is little reason to change this. This 
use of a typedef is intended to ease the later introduction 
of non-orthogonal unit cells.

\section dependency_doc_section Dependency Generation 

The Simpatico makefile system is set up to allow automatic 
generation and updating of files that list the dependencies 
of each source file. This feature is disabled by default, 
but may be enabled by following instructions given below.

Automatic dependency generation is not needed in order compile
the code, or to recompile it.  It is useful for developers 
who make frequent changes to a few C++ header or source 
files, because it allows them to automatically recompile 
only those source files that are effected by these changes.
Until this feature is enabled, however, the only safe way 
to recompile the code after changing any C++ file or 
configuration file is to do a clean rebuild, by entering 
"make clean-mcMd" or "make clean-ddMd" followed by 
"make mcMd" or "make ddMd" from the src/ directory. 

Automatic dependency generation uses a executable python 
script named makeDep in the bin/ directory. This script 
imports several python modules from the tools/python directory. 
The system uses the -MM option of the gnu g++ C++ compiler to 
do the actual analysis of dependencies, and uses a python 
scripts to edit the output produced by g++. To operate, this 
system thus requires that:

  - The g++ gnu C++ compiler executable (or a link to it with 
    this name) must be accessible in a directory in the shell 
    PATH variable.

  - A python interpreter must be accessible.

  - The Simpatico tools/python/ directory must be in the shell 
    variable PYTHONPATH, which is the python module search path. 

  - The makefile variable MAKEDEP must be defined in the file 
    src/compiler.mk. (The definition is commented out by default).

  - The makeDep script must be made accessible by the operating 
    system.

The gcc compiler and a python interpreter are installed by default 
on modern linux installations, and on Mac OS X, so these requirements
are almost never a problem. To enable automatic dependency generation 
(after running the configure script) one must thus normally: 

  - Uncomment the line that defines the variable MAKEDEP in the 
    file src/compiler.mk.

  - Add the Simpatico tools/python directory to the PYTHONPATH 
    unix shell variable, and 

  - Either add the simpatico/bin/ directory to the users PATH
    environment variable, or replace the value of the MAKEDEP 
    variable in the compiler.mk file by the absolute path of 
    the file simpatico/bin/makeDep.

After making these changes, enter "make clean" once more from 
the src/ directory, and then recompile any programs you wish
to use.  After compilation is complete, a new dependency file 
with a suffix *.d will be created alongside each *.cpp source 
file, in addition to a new *.o object file.  The *.d 
dependency file associated with an object file will also be 
regenerated whenever the object file is regenerated.

Automatic dependency generation works by applying the script 
bin/makeDep to each *.cpp source file whenever that file is 
compiled, as a side effect of compilation.  This behavior is 
dictated by the pattern rules defined in src/util/patterns.mk 
and src/mcMd/patterns.mk. The makeDep script generates (or 
regenerates) a *.d file with the same base name as the source 
file, in the same directory.  Each *.d dependency file defines 
a makefile rule for the *.o object file target that contains
a list of files upon which that file depends.  This dependency
list contains the *.cpp file and all of the header files that 
this source file includes, including headers that are included 
indirectly. Once this dependency file exists, it will be used 
the next time "make all" is invoked in order to determine if 
the corresponding source file needs to be recompiled as a 
result of changes in any of the header files upon which it 
depends. Until this dependency file is created, the "make all" 
command causes compilation of all of the source files in the 
directory tree rooted at the directory from which the command 
is issued. 

The dependency list for every *.o file contains the files 
src/compiler.mk, src/util/defines.mk and (for files in the 
src/mcMd directory) src/mcm/defines.mk. This is because 
these makefile fragments contain definitions that control 
compiler options and conditional compilation, and can thus 
effect the result of compiling any source file.  Modifying 
any of these makefile fragments will thus force recompilation 
of all or most of the C++ source files.  Modifying 
src/compiler.mk or src/util/defines.mk forces recompilation 
of the entire class library.

Dependency generation is disabled by default in order to 
allow inexperienced users to quickly compile the code with 
the simplified instructions given above 
("./configure; cd src; make mcMd"), without having to first 
modify their PYTHONPATH. This is sufficient for users who 
want to try out the code, but who do not immediately need 
to modify or add to the source code.

\section compile_doc_section Documentation
The html documentation you are reading was generated using the 
dOxygen documentation utility.  If dOxygen is installed on your 
machine, you can regenerate all of the html documentation by 
changing the working directory to the src/ directory and entering
<code>
    /src> make doc
</code>
from there. This generates documentation for all of the code in 
the Util and McMD namespaces. The resulting html documentation 
is deposited in the doc/html directory. 

The text of the page you are reading now, along with the other 
pages of introductory material, are in the src/dox directory. These
are written in plain text, and so are readable with a text editor.
Documentation for each C++ class is extracted from documentation 
blocks in the class header file. 

Entering 'make cleandoc' from the src/ directory will remove all the 
html documentation from the doc/html directory. If you have a copy
of Simpatico that contains html documentation, do NOT do this unless 
you are sure that you will be able to regenerate the documentation by 
running dOxygen. If you have the html documentation, and are not 
sure whether you can regenerate it, recursively copy (cp -R) the 
doc/html directory to another location before entering make cleandoc.

<ul>
 <li> \ref guide_page   (Up)    </li>
 <li> \ref usage_page (Next)  </li>
</ul>

*/
