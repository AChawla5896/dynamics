namespace McMd
{

/*! \page diagnostics_page Diagnostics

Simpatico allows a user to evaluate and analyze a variety of physical
properties either during a simulation, on the fly, or by postprocessing
configuration dump files. Both modes of operation rely on a set of 
subclasses of the Diagnostic base class to evaluate specific physical 
properties, and to output data and/or update statistical accumulators. 
Source code for the diagnostic classes that are provided with the 
package can be found in the src/mcMd/diagnostics directory. Users 
may add other diagnostics by writing new subclasses of Diagnostic.

The set of diagnostics that will be invoked on-the-fly, during a 
simulation, are specified in "DiagnosticManager" block of the 
parameter file.  Each subblock in this block specifies the name
and parameters for a subclass of Diagnostic. For each such subblock, 
the DiagnosticManager creates a instance of the specified subclass 
(identified by the name in the first line of the subbblock), calls
the readParam() method of the new object to initialize the object,
and adds a pointer to the new Diagnostic to an array. Any number
of diagnostics may be added.

Every subclass of Diagnostic provides a sample() method that is
invoked periodically during a simulation, at a specified interval. 
The sample() method may evaluates a physical property and either
write data to an associated file or updates a statistical 
accumulator, or both.  The sample() method of each diagnostic
is called only when the counter for the number of MD steps or
MC moves is an multiple of an integer interval, which must be
read from file as a parameter for every diagnostic.  The 
"interval" parameter may be different for different diagnostics, 
but the interval for every diagnostic must be a multiple of a 
"baseInterval" parameter that is read by the parent 
DiagnosticManager. 

The DumpConfig diagnostic writes configuration files at regular
intervals that can be used for post-processing. A configuration
file contains the atomic coordinates and unit cell dimensions. 
Each configuration is written to a separate file, with a file 
name that is constructed by appending a sequential integer 
index to a base file name. The base file name is specified in 
the DumpConfig parameter file block. 

Diagnostic classes that are used for on-the-fly analysis may 
also be used for postprocessing of configuration dump files. 
To postprocess a sequence of configuration files, one must
create a parameter file very similar to the one used in the 
original simulation, followed by a command script that contains 
an "ANALYZE" command, rather than a "SIMULATE" command. The
ANALYZE command causes the program to read in a sequence of
configuration files and treat the configurations exactly as 
if they were generated during a simulation. Normally, the
"interval" parameter should be set to 1 for all diagnostics
in a parameter file that is intended for use in postprocessing,
if one wishes each diagnostic in the DiagnosticManager block
to be applied to every configuration file. The names of the
configuration files are constructed by concatenating the
input prefix, a base name that is specified in the ANALYZE
command and an integer in a range that is specified in the
ANALYZE command.  If the input prefix is set to in/, the 
command
\code
   ANALYZE  0   19   config
\endcode
causes the main Simulation object to read in and apply all of
the specified diagnostics to configurations files with names 
in/config.0 in/config.1 ... in/config.19.

<ul>
 <li> \ref cfgfile_page  (Prev) </li>
 <li> \ref guide_page     (Up)   </li>
 <li> \ref postprocess_page  (Next) </li>
</ul>

*/

}
