namespace McMd
{

/*! \page make_page Makefiles

The source code in the src/ directory is compiled using a system of 
unix makefiles.  The makefiles require the use of gnu make (gmake), 
and contain syntax that may not work with some other variants of 
make. 

\section make_main Main makefile files

The file src/makefile is the main makefile.
Invoking "make all" from the src/ directory will:

 - Compile all of the source (*.cpp) files in the util/ and mcMd/ 
   subdirectories, creating corresponding object (*.o) files,

 - Construct a pair of static library (*.a) files from the 
   resulting object files, 

 - Create a pair of executable programs for Monte Carlo (MC) and 
   Molecular Dynamics (MD) simulation. 

By default, the class library files are placed in the simpatico/lib/ 
directory, and the executable files are placed in the simpatico/bin/ 
directory.  The default names of the MC and MD exectuables are mcSim 
and mdSim.  

Invoking "make clean" from the src/ directory removes all of the *.o, 
*.a and executable files created by "make all".

The source (*.cpp) and header (*.h) files for all of the classes 
used by the MC and MD programs are in the src/util and src/mcMd 
directories and their subdirectories.  All of the classes defined 
in the util/ directory tree are in the Util C++ namespace. All of 
those in the mcMd/ directory tree are in the McMd namespace.  The 
header and source file for each class are in the same directory. 
The name of each such file is the same as the class name, followed 
by a prefix .h or .cpp.  When each source file is compiled, the 
corresponding object (*.o) file is also placed in the same directory, 
with the same base name. When automatic dependency generation is
enabled, a dependency file with a suffix *.d is also created for
each source file as a side effect of compilation.

The "all" target of the main src/makefile uses recursive make:
The command associated with this target descends into to each
of the subdirectories src/util, src/mcMd and src/main, and 
invokes "make all" from within each of them. 

The "all" target of the makefile in src/util compiles all of 
the source files in the src/util directory tree, or the Util
namespace. It also constructs a static library that (by default) 
is named lib/util.a. This makefile includes the makefile fragments
src/compiler.mk, which specifies the compiler and compiler 
options, src/util/defines.mk, which defines makefile variables 
that specify C++ preprocessor macros and the name of the static 
library, src/util/patterns.mk, which defines a pattern rule for 
compiling source code in this directory, and src/util/sources.mk, 
which defines a variable util_OBJS that contains a list of all 
of the object file targets in the util directory and its 
subdirectories. 

The "all" target of src/mcMd/makefile compiles all source files 
in the src/mcMd directory tree, or the McMd namespace, and 
constructs a library that (by default) is named lib/mcMd.a.
This makefile includes src/compiler.mk, src/util/defines.mk 
and/mcMd/defines.mk, which define makefile variables that 
specify C++ preprocessor macros and the names of the static 
libraries, src/mcMd/patterns.mk, which defines a pattern 
rule for compiling source files in the mcMd directory, and 
src/util/sources.mk and src/util/sources.mk, which define 
variables that contain lists of all of the source and object
in the util and mcMd directory trees. 

The "all" target of src/main/makefile compoles the main programs
src/main/mdSim.cpp and src/main/mcSim.cpp, links them to the
util and mcMd static libraries, and creates executable files 
for MC and MD simulation that (by default) are named bin/mcSim 
and bin/mdSim. It includes all of the makefile fragments 
included by src/mcMd/makefile as well as files 
main/mcMd/sources.mk, which specifies the names of the main
program source files, and main/mcMd/defines.mk, which defines
paths for the executables.

\section make_subdirectory Subdirectory makefiles

The directories src/util and src/mcMd and all of their subdirectories 
each have one file named "makefile" and one named "sources.mk". 

Invoking the command "make all" from any such source file directory 
will compile all of the source files in the tree rooted at that 
directory (excluding any test programs), and create corresponding 
object files.  Issuing the command "make clean" from any such 
directory removes all of the object and dependency files created 
by the "make all" target of the same makefile. 

The "all" targets for the directories src/util or src/mcMd also 
build static libraries containing all of the files in the Util 
or McMd namespace, respectively. 

\section make_sources Subdirectory sources.mk files

The "sources.mk" in each such directory defines variables that 
contain lists of source and object files for the directory tree
rooted at that directory. Each such file defines two variables 
names of the form [directory]_SRCS and [directory]_OBJS, in 
which [directory] represents a mangled form of the directory 
name. This mangled directory name prefix is constructed from 
the path from src/ to a subdirectory directory of src/ by 
replacing each "/" directory separator by an underscore ("_"). 
Thus for example, the makefile in directory src/util/param 
defines variables util_param_SRCS and util_param_OBJS. 

In each such directory, the value of [directory]_SRCS is a 
list of paths to the all of the source (*.cpp) files in the 
directory tree rooted at the directory. The value of
[directory]_OBJS is a corresponding list of the paths for 
all of the *.o object files, each of which is a makefile
target. These lists exclude files in directories that contain
unit tests.  

In the directory src/util, the "sources.mk" thus
defines variables util_SRCS, and util_OBJS that contain lists 
of the names of all of the source files and all of the object 
file targets, respectively, in the src/util directory tree, or
in the Util namespace.  In sources.mk file in the the src/mcMd 
directory defines corresponding variables mcMd_SRCS, mcMd_OBJS
containing all source and object files in the McMd namespace.

The lists of source files are constructed recursively, by concatenating 
the values of variables defined in subdirectories.  In each directory 
that contains subdirectories with source files, the value of the 
[directory]_SRCS variable is constructed by including the 
"sources.mk" files from all such subdirectories, concatenating 
values of the [subdirectory]_SRCS variables defined in those 
subdirectories, and then adding paths for all source file in 
the parent directory. Adding the name of a source file to the 
_SRCS variable in the directory that contains that file thus 
also automatically adds it to the corresponding variable in 
all parent directories with the trees rooted at src/util and
src/mcMd.

The [directory]_OBJS variable in each sources.mk file is defined 
using a substitution pattern which gives a list containing all 
files in the corresponding _SRCS variable with the suffix *.cpp 
of each file replaced by *.o. Thus, for example, in the file 
src/util/sources.mk, util_OBJS is defined by the pattern 
util_OBJS=$(util_SRCS:.cpp=.o). 

To add a new class within the src/util or src/mcMd directory 
tree to the makefile system, for a class that is defined 
using a separate header and source file, one must simply add 
the class name to the sources.mk file. The class name must 
be given as a path relative to the src/ directory, using the 
variable $(SRC_DIR) for the src/ directory, as discussed 
below. There is no need to add the name of header files for 
which there is no corresponding *.cpp source file, since 
these these files are not compiled separately.

\section make_dependency Dependency Files

When automatic dependency generation is enabled, a dependency
file will be generated for each source file, as a side-effect
of compilation. The dependency file associated with a source 
file has the same base name as the source file, with a suffix
*.d rather than *.cpp, and is placed in the same directory as
the source file.  Each such dependency file defines a single 
makefile rule for creating the corresponding object (*.o) file
target, of the form
\code

object.o: object.cpp object.h header1.h header2.h ....

\endcode
in which the object file target is followed by a list of files 
upon which it depends. This list of depenencies includes all 
of the header files that the source file object.cpp directly 
or indirectly includes. The command required to construct an 
object target is not specified explicitly in the dependency 
file, but is instead defined by a pattern rule defined in 
either util/patterns.mk (for the src/util directory tree) or 
mcMd/patterns.mk (for the mcMd directory tree).

In the makefile in each subdirectory of src/util and src/mcMd, 
a list of makefile targets for individual *.o object files is
created by a line of form:
\code

-include $([directory]_OBJS:.o=.d)

\endcode
in which [directory] represents the mangled name of the 
directory containing the makefile. For example, in the file 
src/mcMd/mdSimulation, this line is
\code

-include $(mcMd_mdSimulation_OBJS:.o=.d)

\endcode
This line attempts to include all of the *.d dependency files 
corresponding to *.o object files in the directory tree rooted
at this directory.  Because each such dependency file contains 
a makefile rule for one object file target, this automatically 
generates a list of makefile rules for all object files in the 
tree rooted at this directory.  The dash in front of "include" 
is necessary to guarantees that "make" will continue quietly 
if no dependency files are found for some or all of the object
files listed in [directory]_OBJS variable. 

Dependency files are created as a side-effect of compilation,
using the executable script bin/makeDep. The pattern rules 
src/util/patterns.mk and src/mcMd/patterns.mk apply the makeDep 
script to a source file whenever that file is compiled, and 
thereby regenerate the associated dependency file.  The "makeDep" 
script works by calling the gnu g++ compiler with the -MM option 
to calculate dependencies, and then editing the resulting file 
to modify the form of the paths for the target and dependency. 

\section make_paths Source File Paths

All file paths in sources.mk files are specified by using the 
makefile variable $(SRC_DIR) to represent the path to the
src/ directory, and adding the relative path from the src/ 
directory to source file of interest.  For example, the path 
to src/util/math/Vector.cpp is given src/util/math/sources.mk 
as
\code

   $(SRC_DIR)/util/math/Vector.cpp

\endcode
The variable SRC_DIR must be set equal to the absolute path 
to the src/ directory in the file compiler.mk, which is then 
included in every other makefile. The correct value for this
path should be set by the ./configure script during initial
configuration. 

After substituting the value of $(SRC_DIR), every source file 
path in every sources.mk file expands to an absolute path.
All paths for the targets and dependencies within the *.d 
dependency files are expressed explicitly as absolute paths. 
In the sources.mk files, the absolute paths are expressed in
in terms of a variable SRC_DIR because the sources.mk files
are stored in the repository and distributed with Simpatico,
and thus must express file paths in a portable form. The 
dependency files can instead use literal absolute paths 
because these files are generated on each users machine
as a side-effect of compilation, and are not stored in 
the repository. 

When automatic dependency generation is enabled, entering
"make all" from any directory will cause recompilation of all 
source files in the tree rooted at that directory that been 
modified or that include header files that have been modified 
since the source file was last compiled. If a developer is 
working on one or two classes in a directory, invoking 
"make all" from that directory will normally recompile 
only the classes that are being worked on. 
If "make all" fails when you are working on one class because 
one more other classes in the same directory are broken, 
compilation of the broken classes can be temporarily 
suppressed by commenting them out of the list of source 
files assigned to the [directory]_SRCS variable in the 
source.mk file in that directory.
Because the Simpatico makefile system uses absolute paths 
for all source files, and because make is not smart enough 
to recognize the equivalence of absolute and relative paths, 
the only way to explicitly compile a single source file is 
to use the absolute path as a makefile target, as in
"make /home/george/simpatico/src/mcMd/simulation/Simulation.cpp".
It is generally more convenient to just use "make all", and 
comment broken or unfinished source files out of the *_SRCS 
list until you are ready to fix them.
<ul>
 <li> \ref developer_page  (Up)    </li>
 <li> \ref test_page       (Next)  </li>
</ul>

*/
}
