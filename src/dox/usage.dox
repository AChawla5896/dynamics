namespace McMd
{

/*! \page usage_page Usage

This section describes how to use the programs mcSim, mdSim and ddSim.
The discussion assumes that the executables have been installed in a
directory that is in the users command search $PATH variable. 

\section usage_running Running a Simulation 

The syntax for running a simulation is very similar for mcSim, mdSim
and ddSim. Each program is controlled by reading a parameter file. 
The single-processor versions of mdSim and mcSim, and ddSim, all 
read this file from standard input.  To run a single-processor MD 
simulation using a parameter file named "param" in the current 
working directory, one would thus enter 
\code
   mdSim < param
\endcode
To run an MC simulation, one would enter "mcSim < param" instead, or
"ddSim < param" for a parallel MD simulation.  If everything works 
correctly, the contents of a log file will be sent to standard output 
(i.e., the screen) during execution. This log file  can also be 
redirected to another file using, e.g., 
\code
  mdSim < param > log
\endcode
This is the syntax used when a job is run in background, or in a
queue.

The mdSim and mcSim programs can each be invoked with three command line 
options:
<ul>
  <li> -e: Activates echoing of ach line of the parameter file as it is read.</li>
  <li> -e filename: Restarts a previous simulation. The required parameter "filename"
          is the base name of the required input files, which have suffixes *.prm,
          *.rst, and *.cmd. </li>
  <li> -p: Enables the use of free energy perturbation theory.
  </li>
</ul>
The -e option can be useful for locating errors in the parameter file block.  
The -p option is generally only useful when used with a version of mcSim or
mdSim that is compiled for use on multiple processors, and is discussed in 
more detail \ref perturb_page "here".

Each simulation generally requires three input files: 
<ul>
   <li> a parameter file </li>
   <li> a command file </li>
   <li> a configuration file </li>
</ul>
The parameter file is usually read from standard input, and contains the 
path to the command file.  The command file must contain the name of an 
input configuration file, which is read automatically. The command file
generally contains the name of an configuration file that contains an
initial configuration.  The contents and formats of these different types 
of file are discussed briefly below and in more detail in several separate 
pages (see \ref param_page , \ref commands_page and \ref cfgfile_page).

\section section_program Main Program

The main program files for single processor MC and MD simulations are 
src/mcMd/mcSim.cpp and src/mcMd/mdSim.cpp. The main program for parallel
MD simulation is src/ddMd/mdSim.cpp. All of three programs have a 
similar, very simple structure.  Shown below is a slightly simplified 
version of the main program src/mcMd/mcSim.cpp that is compiled to 
create the mcSim executable:

\code
namespace McMd
{

   int main 
   {
      McSimulation simulation;
  
      \\ Read the parameter file from standard input
      simulation.readParam();
  
      \\ Read the command file.
      simulation.readCommands();
  
   }

}
\endcode
This minimal version of the program contains only three executable lines:

The first line of the program creates an object named simulation that is 
an instance of the class McSimulation. An McSimulation object is the main
object for an MC simulation. 

The second line invokes the readParam() method of the McSimulation.
Invoking readParam() with no argument (as here) reads the parameter file 
from standard input. Despite its name, the readParam() method does not 
merely read parameters: By convention, the readParam() method of any
object in a Simpatico simulation is responsible for reading any data
required to initialize the object, allocating any required memory, 
and initializing the internal state of the object so as to leave that
object (and any member subojects) ready for use.  The readParam() 
method of an object may call readParam() methods of member subobjects. 
The readParam() method of the main McSimulation object for an MC 
simulation thus initializes the entire simulation.

The third line invokes the readCommands() method. This method reads 
a command script file containing a list of commands that are 
interpreted and executed sequentially.  The name of the command file 
must be specified in the param file. The command file usually contains 
(at a minimum) commands to read a specific input configuration file, 
run a simulation, and write the final configuration to file. 

The analogous code for the single-processor MD (mdSim) and parallel 
MD (ddSim) programs is almost identical. The only difference is that 
the main object in mdSim.cpp is an instance of McMd::MdSimulation, 
and the main object in ddSim.ccpp is an instance of DdMd::System.

The actual main programs src/mcMd/mcSim.cpp, src/mcMd/mdSim.cpp 
and src/ddMd/mdSim.cpp are  more complicated than the above example 
primarily because they also contain code to process command line 
options. 

\section io_Parameter Parameter File

The parameter file contains all the data required to initialize 
a simulation, i.e., to allocate all required memory and initialize 
all variables to valid values. This data includes: (1) information
required to allocate memory, such as the maximum allowable number
of atoms or molecules, (2) physical parameters such as the 
temperature and potential energy parameters, (3) choices of
available simulation algorithms, such as the set of Monte Carlo 
moves for a MC simulation or an integration algorithm and time 
step for an MD simulation, and (4) instructions for any desired 
data analysis and/or data output operations. The parameter file
also contains the filename for the command file that should be
read by the readCommands() method.  Examples of parameter file 
formats for different types of simulation are shown and 
discussed \ref param_page "here".

\section io_Command Command File

The command file contains a sequence of commands that are read and 
executed in sequence. Each line of the command file starts with a
capitalized command name, followed by zero or more arguments. The 
minimal command file for an mcSim simulation looks like this:
\code
READ_CONFIG       config
SIMULATE          100000
WRITE_CONFIG      config
FINISH   
\endcode
This file instructs the program to read a configuration file named 
"config", run a simulation of 100000 attempted MC moves, write a 
final output configuration file to a file named "config", and then 
stop. The command file is read by a loop that terminates when a 
line containing only the command FINISH is encountered. A full list 
of valid commands and their arguments is given \ref commands_page 
"here".

The above comand script uses the name "config" for both the input
and output configuration files. This does not necessarily mean 
that this script would overwrite the input configuration file. 
The full file names for the input and output config files are 
constructed by appending the file names specified as arguments 
to the READ_CONFIG and WRITE_CONFIG commands to input and output 
prefix strings (named inputPrefix and outputPrefix) that are 
specified in the parameter file.  The outputPrefix string is 
also prepended to a variety of other output files. The values 
of these prefix strings are often set to directory names 
followed by a directory separator symbol "/", in order to place 
all input files and output files in different directories. 

\section io_Config Configuration File

A configuration file specifies all characteristics of the system
that can change during the course of a simulation, and any 
information about molecular structure that is not in the param
file.

The default file format for both mcSim and mdSim contains the 
dimensions of the periodic system boundary, the number of molecules 
of each molecular species, and the positions of all atoms. The 
default file mdSim also contains the atomic velocities. The 
default configuration file formats for mdSim and mcSim do not 
contain any information about molecular structure (which atom 
is connected to which), because this is contained in the 
param file format for these two programs.

The default file format for ddSim contains box dimensions, atomic 
positions and velocities, and connectivity about bonds and other 
covalent groups.  

The configuration file formats for all programs are described in
more detail \ref cfgfile_page "here".

\section io_Output Output Files

A typical simulation writes a log file to report the progress of 
the simulation. In the default, single-processor version of mdSim
and mcSim write the log file to standard output.  The command 
file normally contains a WRITE_CONFIG command that instructs 
the program to write a final configuration to a file. 

The parameter file may also specify that complete system 
configurations be written to either a series of configuration 
files or to a single trajectory file at regular intervals during 
the simulation, for postprocessing. 

A variety of other output files may also be written by classes 
that implement on-the-fly statistical analyses or data output 
operations. These data analysis and data output classes are all 
subclasses of the Diagnostic base class. The parameter file may 
specify a set of Diagnostic objects that should used during a 
simulation, each of which samples or outputs data at a specified
interval, and each of which writes its output one or more 
separate files. The path to each such output files is constructed
by prepending a common outputPrefix string to a base name that 
is specified in the parameter file. 

<ul>
 <li> \ref compile_page  (Previous) </li>
 <li> \ref guide_page    (Up)       </li>
 <li> \ref param_page    (Next)     </li>

</ul>

*/
}
