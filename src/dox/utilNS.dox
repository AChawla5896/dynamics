namespace Util 
{

/*! \page Util_NS_page Util namespace

The Util namespace contains a varity of general utility classes for scientific 
computation. Here we list only a few classes that are particularly heavily used
in the McMd namespace.

\section space_sec Space (Vectors and Tensors)

The dimensionality of space is defined by the int const Dimension = 3.

Cartesian vectors, such as atomic positions, are represented throughout 
Simpatico by Vector objects. The elements of a Vector can be manipulated 
exactly as if they were elements of a normal C array: If v is a 
three-dimensional Vector, v[0], v[1], and v[2] are its Cartesian 
components, which are all double precision floating point.
A variety of standard mathematical operations (vector addition, dot 
products, etc.) are provided as methods or overloaded operators. 

An IntVector is a Vector with integer (rather than floating point) elements.
Most of the operations that are defined for a Vector are also defined for an
IntVector.

A Tensor is an object with two Cartesian indices. The components of a Tensor 
T are accessed using the notation T(i, j), where i and j are indices between 
0 and Dimension - 1 (i.e., between 0 and 2).

See also: \ref Space_Module "Space Module"

\section random_sec Random

A Random object represents a random number generator (RNG). The implementation
is based on a Mersenne-Twister RNG.
 
See also: \ref Random_Module "Random Module"

\section containers_sec Container Templates

The src/util/containers directory provides a set of container class 
templates that are used throughout Simpatico. These containers are consistently 
used in preference to either bare C arrays or to standard library containers,
with a few exceptions. The most common of these (DArray, FArray, DPArray, and 
FPArray) are one-dimensional array containers.  All of these array containers 
overload the [] operator to return a specific element by reference, using the 
same syntax as a C array or the standard library std::vector container. The 
prefixes D or F in the name an array container template indicate whether the 
underlying C-array is dynamically allocated or fixed size. The prefix P 
indicates that array implementation stores pointers to objects, rather than
actual objects.  More specialized containers include ArrayStack, ArraySet, 
and RingBuffer. 

All array containers provide optional checking of array index bounds. This
feature will be activated at compile time (for debugging purposes or safety) 
if the preprocessor macro UTIL_DEBUG is defined, or may be turned off (for 
speed) by not defining this macro. 

The decision to use this set of "home made" containers in preference to heavy
use of std::vector was based in part on a desire for two "safety" features 
that std::vector lacks. The first is ability to conveniently turn array index
bounds checking on or off, as described above. The second is that our arrays
wrap a fixed block of memory whose location is guaranteed to remain unchanged
until the container is destroyed. Because a std::vector is designed to grow
as needed as elements are added, the C-array underlying a std::vector can be 
automatically reallocated and copied to a new location in response to addition 
of new elements. This makes it dangerous to use std::vector containers for 
designs in which objects are allocated in arrays, but are accessed via 
pointers, which is a common pattern in Simpatico. 

See also: \ref Container_Module "Container Module"

\section param_sec Parameter File IO

The src/util/containers directory contains a set of classes that are used to 
read and write a parameter file. Every class that needs to read data from the
parameter file during initialization must be derived from the ParamComposite 
base class, and must overload the ParamComposite::readParam() method, which
reads an associated block of the parameter file.

See also: \ref param_page       "Parameter Files"

See also: \ref read_param_page  "readParam() Methods"

See also: \ref Param_Module     "Parameter File IO Module"

Navigation:
<ul>
 <li> \ref design_page  (Up)  </li>
 <li> \ref McMd_NS_page (Next)      </li>
</ul>

*/
}
