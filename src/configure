#!/bin/bash

#-----------------------------------------------------------------------
# Name: configure
#
# Purpose: Sets macros enable or disable features prior to compiling.
#
# This script should be called prior to compiling in order to enable or
# disable particular compile time features. See the usage examples at the 
# bottom of this documentation block. This version of the script must be
# called from the root of the build directory tree in which a corresponding
# version of the code will built. It should thus be called from the
# bld/serial directory for standard out-of-source build of serial 
# programs (without MPI), from bld/parallel for a standard out-of-source 
# build with MPI, or from src/ for an in source build. Each of these build 
# directories contains a copy of this script.  Invoking the configure script 
# in a specific build directory only affects code that is built in that
# directory.
#
# The configure script works by editing the config.mk makefile fragments 
# in the build directory from which it is called. These files control
# which preprocessor macros are passed to the compiler for code compiled 
# in that build directory.
#
# Synopsis:
#
#      ./configure [options]
#
# Call "./configure -h" to print a full list of command line options.
#-----------------------------------------------------------------------
while getopts "m:g:b:a:d:e:f:l:s:u:k:c:j:qh" opt; do

  if [ -n "$MACRO" ]; then 
    MACRO=""
  fi
  if [ -n "$FILE" ]; then 
    FILE=""
  fi
  
  case $opt in
    m)
      MACRO=UTIL_MPI
      VALUE=1
      FILE=config.mk
      ;;
    g)
      MACRO=UTIL_DEBUG
      VALUE=1
      FILE=util/config.mk
      ;;
    b)
      MACRO=INTER_BOND
      VALUE=1
      FILE=inter/config.mk
      ;;
    a)
      MACRO=INTER_ANGLE
      VALUE=1
      FILE=inter/config.mk
      ;;
    d)
      MACRO=INTER_DIHEDRAL
      VALUE=1
      FILE=inter/config.mk
      ;;
    c)
      MACRO=INTER_COULOMB
      VALUE=1
      FILE=inter/config.mk
      ;;
    e)
      MACRO=INTER_EXTERNAL
      VALUE=1
      FILE=inter/config.mk
      ;;
    l)
      MACRO=MCMD_LINK
      VALUE=1
      FILE=mcMd/config.mk
      ;;
    f)
      MACRO=MCMD_PERTURB
      VALUE=1
      FILE=mcMd/config.mk
      ;;
    s)
      MACRO=MCMD_SHIFT
      VALUE=1
      FILE=mcMd/config.mk
      ;;
    u)
      MACRO=DDMD_MODIFIERS
      VALUE=1
      FILE=ddMd/config.mk
      ;;
    k)
      case $OPTARG in
      0)  # Disable (comment out) the definition of MAKEDEP
        if [ `grep "^ *MAKEDEP" config.mk` ]; then
           echo "Disabling MAKEDEP in file config.mk" >&2
           sed "s/^ *MAKEDEP/#MAKEDEP/" config.mk > temp
           cp temp config.mk
           rm temp
        else
           echo "MAKEDEP already disabled in file config.mk" >&2
        fi
        ;;
      1) # Enable (uncomment) the definition of MAKEDEP
        if [ `grep "^ *MAKEDEP" config.mk` ]; then
           echo "MAKEDEP already enabled in file config.mk" >&2
        else
           echo "Enabling MAKEDEP in file config.mk" >&2
           sed "s/^ *# *MAKEDEP/MAKEDEP/" config.mk > temp
           cp temp config.mk
           rm temp
        fi
        ;;
      esac
      ;;
    j)
      FILE=config.mk
      cp "$FILE" temp
      sed "s/COMPILER=.*$/COMPILER=$OPTARG/" temp > "$FILE"
      echo "Setting COMPILER = $OPTARG in file $FILE" >&2
      rm temp
      ;;
    q)
      if [ `grep "^ *UTIL_MPI *= *1" config.mk` ]; then
         echo "-m ON  - MPI" >&2
         MPI=1
      else
         echo "-m OFF - MPI" >&2
         MPI=
      fi
      if [ `grep "^ *UTIL_DEBUG *= *1" util/config.mk` ]; then
         echo "-g ON  - debugging" >&2
      else
         echo "-g OFF - debugging" >&2
      fi
      if [ `grep "^ *INTER_BOND *= *1" inter/config.mk` ]; then
         echo "-b ON  - bond potential" >&2
      else
         echo "-b OFF - bond potential" >&2
      fi
      if [ `grep "^ *INTER_ANGLE *= *1" inter/config.mk` ]; then
         echo "-a ON  - angle potential" >&2
      else
         echo "-a OFF - angle potential" >&2
      fi
      if [ `grep "^ *INTER_DIHEDRAL *= *1" inter/config.mk` ]; then
         echo "-d ON  - dihedral potential" >&2
      else
         echo "-d OFF - dihedral potential" >&2
      fi
      if [ `grep "^ *INTER_COULOMB *= *1" inter/config.mk` ]; then
         echo "-c ON  - coulomb potential" >&2
      else
         echo "-c OFF - coulomb potential" >&2
      fi
      if [ `grep "^ *INTER_EXTERNAL *= *1" inter/config.mk` ]; then
         echo "-e ON  - external potential" >&2
      else
         echo "-e OFF - external potential" >&2
      fi
      if [ `grep "^ *MCMD_LINK *= *1" mcMd/config.mk` ]; then
         echo "-l ON  - McMd links (mutable bonds)" >&2
      else
         echo "-l OFF - McMd links (mutable bonds)" >&2
      fi
      if [ `grep "^ *MCMD_SHIFT *= *1" mcMd/config.mk` ]; then
         echo "-s ON  - McMd shift" >&2
      else
         echo "-s OFF - McMd shift" >&2
      fi
      if [ -n "$MPI" ]; then
         if [ `grep "^ *MCMD_PERTURB *= *1" mcMd/config.mk` ]; then
            echo "-f ON  - McMd free energy perturbation" >&2
         else
            echo "-f OFF - McMd free energy perturbation" >&2
         fi
      fi
      if [ `grep "^ *DDMD_MODIFIERS *= *1" ddMd/config.mk` ]; then
         echo "-u ON  - DdMd modifiers" >&2
      else
         echo "-u OFF - DdMd modifiers" >&2
      fi
      if [ `grep "^ *MAKEDEP" config.mk` ]; then
         echo "-k ON  - automatic dependency tracking" >&2
      else
         echo "-k OFF - automatic dependency tracking" >&2
      fi
      echo `grep "^ *COMPILER *=" config.mk` >&2
      ;;
    h)
      echo "The configure script may be called prior to compiling to enable or"
      echo "disable specific compile time features, to query which features are"
      echo "currently set to be enabled (option -q) or to choose a compiler."
      echo "This script must be called from the directory that contains the"
      echo "script file, and only effects code built in the same directory tree."
      echo " "
      echo "Command Line Options:"
      echo "-h           help: prints explanation of options (this command)"
      echo "-q           query: prints report of options that are enabled / disabled."
      echo "-j compiler  Choose a compiler name: sets COMPILER=compiler in config.mk"
      echo " "
      echo "Each of the following options enables or disables a feature by defining"
      echo "or undefining a corresponding preprocessor macro. Each such option"
      echo "takes 0 or 1 as a required argument, using 1 to enable the feature"
      echo "or 0 to disable." 
      echo " "
      echo "-m (0|1)   mpi parallelization         (defines/undefines UTIL_MPI)"
      echo "-g (0|1)   debugging                   (defines/undefines UTIL_DEBUG)"
      echo "-b (0|1)   bond potentials             (defines/undefines INTER_ANGLE)"
      echo "-a (0|1)   angle potentials            (defines/undefines INTER_ANGLE)"
      echo "-d (0|1)   dihedral potentials         (defines/undefines INTER_DIHEDRAL)"
      echo "-c (0|1)   coulomb potentials          (defines/undefines INTER_COULOMB)"
      echo "-e (0|1)   external potentials         (defines/undefines INTER_EXTERNAL)"
      echo "-l (0|1)   McMd links (mutable bonds)  (defines/undefines MCMD_LINK)"
      echo "-s (0|1)   McMd shift                  (defines/undefines MCMD_SHIFT)"
      echo "-f (0|1)   McMd perturbation           (defines/undefines MCMD_PERTURB)"
      echo "-u (0|1)   DdMd modifiers              (defines/undefines DDMD_MODIFIERS)"
      echo "-k (0|1)   dependency generation       (defines/undefines MAKEDEP)"
      echo " "
      echo "Examples:"
      echo " "
      echo "To query which features are currently set to be enabled:"
      echo ">  ./configure -q"
      echo "To disable debugging and enable angle and dihedral potentials:"
      echo ">  ./configure -g0 -a1 -d1"
      echo "To set COMPILER=intel in config.mk"
      echo ">  ./configure -j intel"
      echo "  "
      ;;
    esac

  if [ -n "$MACRO" ]; then
    
    case $OPTARG in
    0)  # Disable (comment out) the macro=1 definition
      if [ `grep "^ *$MACRO *= *1" "$FILE"` ]; then
         echo "Disabling $MACRO in file $FILE" >&2
         sed "s/$MACRO *=.*$/$MACRO=1/" "$FILE" > temp
         sed "s/^ *$MACRO=/#$MACRO=/" temp > "$FILE"
         rm temp
      else
         echo "$MACRO already disabled in file $FILE" >&2
      fi
      ;;
    1) # Enable (uncomment) the macro=1 definition
      if [ `grep "^ *$MACRO *= *1" "$FILE"` ]; then
         echo "$MACRO already enabled in file $FILE" >&2
      else
         echo "Enabling $MACRO in file $FILE" >&2
         sed "s/$MACRO *=.*$/$MACRO=1/" "$FILE" > temp
         sed "s/^ *# *$MACRO=/$MACRO=/" temp > "$FILE"
         rm temp
      fi
      ;;
    esac
  fi

done

