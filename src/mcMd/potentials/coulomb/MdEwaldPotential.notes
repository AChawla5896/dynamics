
   /**
   * Ewald KSpace Coulomb potential implementation class
   */
   MdEwaldPotential : public MdCoulombPotential, 
                      public EwaldParameters
   {
   public:

      // Constructor
      MdEwaldPotential(System& system)
      {}

      // Add K-Space forces
      void addForces();

      // Compute KSpace energy and stress components (inherited)
      void computeEnergy();
      void computeStress();

      // Unset KSpace energy and stress components (inherited)
      void unsetEnergy();
      void unsetStress();

      // Return total Coulomb energy and stress (kspace + rspace)
      double energy();
      double pressure();
      Tensor stress();

      // Return K-space contributions (inherited)
      double kspaceEnergy();
      double kSpacePressure();
      Tensor kSpaceStress();

      // Return R-space contributions (inherited)
      double rSpaceEnergy()
      { return rspaceAccumulatorPtr_->rSpaceEnergy(); }

      double kSpacePressure();

      Tensor kSpaceStress();
      { return rspaceAccumulatorPtr_->rSpaceStress(); }

      /*
      * All accessor functions can be designed so that they throw
      * Exceptions upon any attempt to access the value of a 
      * Setable parameter that is not set. The accessors for total
      * energy and stress should throw Exceptions if either kspace
      * or rSpace component is not set. 
      */

    private:

      // KSpace part of Coulomb energy
      Setable<double> pairEnergy_;

      // KSpace part of Coulomb stress.
      Setable<Tensor> pairStress_;

      // Pointer to accumulator part of MdEwaldPairPotentialImpl
      EwaldRSpaceAccumulator* rSpaceAccumulatorPtr_;
   }
