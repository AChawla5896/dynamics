   /// Abstract base class for potentials with K-space part
   /// Interface class - no data
   MdCoulombPotential : public ParamComposite
   {
   public:

       void setPairPotential(MdPairPotential& pairPotential) = 0;

       // Add K-Space forces
       virtual void addForces() = 0;

       // Compute KSpace energy and stress components
       virtual void computeEnergy() = 0;
       virtual void computeStress() = 0;

       // Unset accumulators for kspace energy and stress components.
       virtual void unsetEnergy();
       virtual void unsetSress();

       // Return total energy and stress
       virtual double energy() const = 0;
       virtual double pressure() const = 0;
       virtual Tensor stress() const = 0;

       // Return K-space contributions
       virtual double kSpaceEnergy() const = 0;
       virtual double kSpacePressure() const = 0;
       virtual Tensor kSpaceStress() const = 0;

       // Return R-space contributions
       virtual double rSpaceEnergy() const = 0;
       virtual double rSpacePressure() const = 0;
       virtual Tensor rSpaceStress() const = 0;

       // Note: Public functions are needed to return rspace components 
       // are needed in this base class because the MdPairPotential base 
       // class interface does not provide access to these values, and
       // public interface of the MdSystem provides access to the 
       // MdEwaldPairPotentialImpl<Pair> only through a pointer to the 
       // MdPairPotential base class. It makes sense to provide such
       // accessors in the interface of MdKSpacePotential rather than
       // MdPairPotential because they are specifci to Coulomb
       // interactions, and to division into KSpace and RSpace 
       // components that is characteristic of the Ewald method.

   };

