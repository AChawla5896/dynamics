
   /**
   * Implementation of a pair potential for a charged system.
   *
   * This class computes forces and energies for all short ranged
   * pair interactions for a charged system, including both   
   * non-Coulomb (e.g., Lennard-Jones) pair interactions and the
   * short range part of the Coulomb interaction in the Ewald method.
   * The addForces() method adds both types of forces to atom forces,
   * but separate accessors are given for non-Coulombic and short
   * range Coulomb contributions to energy and stress.
   */
   template <class Pair>
   class MdEwaldPairPotentialImpl<Pair>
    : public MdPairPotential, public EwaldRSpaceAccumulator
   {

      MdEwaldPairPotentialImpl(MdSystem& system)
      {
         // Get pointer to MdCoulombPotential.
         MdCoulombPotential* kspacePtr = 0;
         kspacePtr = &system.kspacePotential();

         // Dynamic cast to a pointer to MdEwaldPotential.
         MdEwaldPotential* ewaldPtr = 0; 
         ewaldPtr = dynamic_cast<MdEwaldPotential*>(kspacePtr);

         // Pass address of MdEwaldPotential to EwaldPair interaction.
         // Note: Uses implicit cast of MdEwaldPotential to its
         // EwaldParameters base class.
         ewaldPair.setParams(*ewaldPtr);
      }

      // Force evaluation, which adds both types of pair force.
      virtual void addForces();

      /** 
      * Thermo computes, which computes nonCoulombic and coulombic
      * parts, but stores them in different accumulator variables.
      * The implementation should also mark both accumulators as set.
      */
      virtual void computeEnergy();
      virtual void computeStress();

      // Unset both energy accumulators.
      void unsetEnergy();
      { 
         pairEnergy_.unset(); 
         rSpaceEnergy_.unset(); 
      }

      // Unset both stress accumulators.
      void unsetStress();
      { 
         pairStress_.unset(); 
         rSpaceStress_.unset(); 
      }

      double rSpaceEnergy() const
      {  return rSpaceEnergy_.value(); }

      // Get non-coulombic pair stress.
      Tensor stress()
      {  return pairStress_.value(); }

      // Get non-coulombic pair pressure.
      double pressure();

   private:

      // Non-Coulombic pair interaction
      Pair pair_;

      // Ewald short-range pair Interaction
      EwaldPair ewaldPair_;

      // Non-Coulomb pair accumulators
      Setable<double> pairEnergy_;  
      Setable<Tensor> pairStress_; 

   };

